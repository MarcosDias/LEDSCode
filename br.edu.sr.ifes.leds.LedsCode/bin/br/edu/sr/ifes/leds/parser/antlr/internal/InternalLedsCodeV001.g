/*
 * generated by Xtext
 */
grammar InternalLedsCodeV001;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package br.edu.sr.ifes.leds.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.edu.sr.ifes.leds.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.edu.sr.ifes.leds.services.LedsCodeV001GrammarAccess;

}

@parser::members {

 	private LedsCodeV001GrammarAccess grammarAccess;
 	
    public InternalLedsCodeV001Parser(TokenStream input, LedsCodeV001GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LedsCodeDSL";	
   	}
   	
   	@Override
   	protected LedsCodeV001GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLedsCodeDSL
entryRuleLedsCodeDSL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLedsCodeDSLRule()); }
	 iv_ruleLedsCodeDSL=ruleLedsCodeDSL 
	 { $current=$iv_ruleLedsCodeDSL.current; } 
	 EOF 
;

// Rule LedsCodeDSL
ruleLedsCodeDSL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLedsCodeDSLAccess().getApplicationApplicationParserRuleCall_0_0()); 
	    }
		lv_application_0_0=ruleApplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLedsCodeDSLRule());
	        }
       		set(
       			$current, 
       			"application",
        		lv_application_0_0, 
        		"Application");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
    { 
        newCompositeNode(grammarAccess.getLedsCodeDSLAccess().getModuleAplicationParserRuleCall_1()); 
    }
ruleModuleAplication
    { 
        afterParserOrEnumRuleCall();
    }
)+)
;





// Entry rule entryRuleApplication
entryRuleApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApplicationRule()); }
	 iv_ruleApplication=ruleApplication 
	 { $current=$iv_ruleApplication.current; } 
	 EOF 
;

// Rule Application
ruleApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='app' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getApplicationAccess().getAppKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getApplicationAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getNameApplicationNameApplicationParserRuleCall_2_0()); 
	    }
		lv_nameApplication_2_0=ruleNameApplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		set(
       			$current, 
       			"nameApplication",
        		lv_nameApplication_2_0, 
        		"NameApplication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getLanguageLanguageParserRuleCall_3_0()); 
	    }
		lv_language_3_0=ruleLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		set(
       			$current, 
       			"language",
        		lv_language_3_0, 
        		"Language");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getFrameworkFrameworkParserRuleCall_4_0()); 
	    }
		lv_framework_4_0=ruleFramework		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		set(
       			$current, 
       			"framework",
        		lv_framework_4_0, 
        		"Framework");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getOrmORMParserRuleCall_5_0()); 
	    }
		lv_orm_5_0=ruleORM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		set(
       			$current, 
       			"orm",
        		lv_orm_5_0, 
        		"ORM");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getDatabaseDataBaseParserRuleCall_6_0()); 
	    }
		lv_database_6_0=ruleDataBase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		set(
       			$current, 
       			"database",
        		lv_database_6_0, 
        		"DataBase");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getApplicationAccess().getModuleAplicationParserRuleCall_7()); 
    }
ruleModuleAplication
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getApplicationAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleModuleAplication
entryRuleModuleAplication returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleAplicationRule()); } 
	 iv_ruleModuleAplication=ruleModuleAplication 
	 { $current=$iv_ruleModuleAplication.current.getText(); }  
	 EOF 
;

// Rule ModuleAplication
ruleModuleAplication returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='module' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleAplicationAccess().getModuleKeyword_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleAplicationAccess().getLeftCurlyBracketKeyword_1()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleAplicationAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleNameApplication
entryRuleNameApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameApplicationRule()); }
	 iv_ruleNameApplication=ruleNameApplication 
	 { $current=$iv_ruleNameApplication.current; } 
	 EOF 
;

// Rule NameApplication
ruleNameApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='name' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNameApplicationAccess().getNameKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNameApplicationAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_name_2_0=RULE_UNQUOTED_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getNameApplicationAccess().getNameUNQUOTED_STRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameApplicationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"UNQUOTED_STRING");
	    }

)
))
;





// Entry rule entryRuleLanguage
entryRuleLanguage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLanguageRule()); }
	 iv_ruleLanguage=ruleLanguage 
	 { $current=$iv_ruleLanguage.current; } 
	 EOF 
;

// Rule Language
ruleLanguage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='language' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLanguageAccess().getLanguageKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getLanguageAccess().getDictionaryParserRuleCall_1()); 
    }
    this_Dictionary_1=ruleDictionary
    { 
        $current = $this_Dictionary_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFramework
entryRuleFramework returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFrameworkRule()); }
	 iv_ruleFramework=ruleFramework 
	 { $current=$iv_ruleFramework.current; } 
	 EOF 
;

// Rule Framework
ruleFramework returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='framework' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFrameworkAccess().getFrameworkKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getFrameworkAccess().getDictionaryParserRuleCall_1()); 
    }
    this_Dictionary_1=ruleDictionary
    { 
        $current = $this_Dictionary_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleORM
entryRuleORM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getORMRule()); }
	 iv_ruleORM=ruleORM 
	 { $current=$iv_ruleORM.current; } 
	 EOF 
;

// Rule ORM
ruleORM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='orm' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getORMAccess().getOrmKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getORMAccess().getDictionaryParserRuleCall_1()); 
    }
    this_Dictionary_1=ruleDictionary
    { 
        $current = $this_Dictionary_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDataBase
entryRuleDataBase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataBaseRule()); }
	 iv_ruleDataBase=ruleDataBase 
	 { $current=$iv_ruleDataBase.current; } 
	 EOF 
;

// Rule DataBase
ruleDataBase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='database' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataBaseAccess().getDatabaseKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getDataBaseAccess().getDictionaryParserRuleCall_1()); 
    }
    this_Dictionary_1=ruleDictionary
    { 
        $current = $this_Dictionary_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDictionary
entryRuleDictionary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDictionaryRule()); }
	 iv_ruleDictionary=ruleDictionary 
	 { $current=$iv_ruleDictionary.current; } 
	 EOF 
;

// Rule Dictionary
ruleDictionary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDictionaryAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDictionaryAccess().getElementsKeyValueParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleKeyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictionaryRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"KeyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDictionaryAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDictionaryAccess().getElementsKeyValueParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleKeyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDictionaryRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"KeyValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDictionaryAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleKeyValue
entryRuleKeyValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyValueRule()); }
	 iv_ruleKeyValue=ruleKeyValue 
	 { $current=$iv_ruleKeyValue.current; } 
	 EOF 
;

// Rule KeyValue
ruleKeyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getKeyValueAccess().getKeyIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getKeyValueAccess().getColonKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyValueAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





RULE_INT : ('0'..'9')+;

RULE_UNQUOTED_STRING : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_OL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ANY_OTHER : .;


