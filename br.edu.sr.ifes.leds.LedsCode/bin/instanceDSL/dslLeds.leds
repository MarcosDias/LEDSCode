Project Library{

interface {
	Domain.modulo.service
	Library.media.LibraryService

}


Infrastructure {

	basePackage = org.library
	
	versionofProject = 0.0.0
	language {nome: valor, versao:valor}
	framework {chave: valor, }
	orm {nome: valor, versao }
	devdatabase {url: valor, }
	proddatabase

}

Domain Library {
  
    
  Module media {
    
    Service LibraryService {
      findLibraryByName => LibraryRepository.findLibraryByName;
      findMediaByName => MediaRepository.findMediaByName;
      findMediaByCharacter => MediaRepository.findMediaByCharacter;
      findPersonByName => PersonService.findPersonByName;
    }
    
    Entity Library {
      String name key
      Set<@PhysicalMedia> media
    
      Repository LibraryRepository {
        Library findLibraryByName(String name) throws LibraryNotFoundException;
      }
    }
    
    Entity PhysicalMedia {
      String status length="3"
      String location
      Library library nullable
      Set<@Media> media
    }
    
    Service MediaService {
      findAll => MediaRepository.findAll;
    }
    
    abstract Entity Media {
      String title
      Set<PhysicalMedia> physicalMedia
      Set<Engagement> engagements
      Set<MediaCharacter> mediaCharacters
    
      Repository MediaRepository {
        > @MediaCharacterRepository
        int getNumberOfMovies(Long libraryId) => AccessObject;
        List<@Media> findMediaByCharacter(Long libraryId, String characterName);
        findById;
        save;
        findAll;
        findByQuery;
        protected findByKeys(Set<String> keys, String keyPropertyName, Class persistentClass);
        List<@Media> findMediaByName(Long libraryId, String name);
        Map<String, @Movie> findMovieByUrlIMDB(Set<String> keys);
      }
    }
    
    Entity Book extends Media {
      !auditable
      String isbn key length="20"
    }
    
    Entity Movie extends Media {
      !auditable
      String urlIMDB key
      Integer playLength
      - @Genre category nullable
    }
    
    enum Genre {
      ACTION,
      COMEDY,
      DRAMA,
      SCI_FI
    }
    
      
    Service MediaCharacterService {
      findAll => MediaCharacterRepository.findAll;
    }
    
   }
    
  Module person {
    Service PersonService {
      findPersonByName => PersonRepository.findPersonByName;
    }
    
    Entity Person {
      Date birthDate past
      - @Gender sex !changeable
      - @Ssn ssn key
      - @PersonName name
    
      Repository PersonRepository {
        List<@Person> findPersonByName(String name) => AccessObject;
        save;
        save(Collection<@Person> entities);
        findByQuery;
        findByExample;
        findByKeys;
      }
    }
    
    
    enum Gender {
      FEMALE("F"),
      MALE("M")
    }
  }
}