grammar br.edu.sr.ifes.leds.LedsCodeV001 with org.eclipse.xtext.common.Terminals

generate ledsCodeV001 "http://www.edu.br/sr/ifes/leds/LedsCodeV001"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/*
============== LEDSCode ============== 
*/

LedsCodeDSL:
	project+=Project;

Project:
	'project' name=ID '{'
		infrastructureBlock=InfrastructureBlock
		(interfaceBlock=InterfaceBlock)? 
		(applicationBlock+=ApplicationBlock)*
		(domainBlock+=DomainBlock)+
		
	'}'
;
	
InterfaceBlock: 
	'interface' name=ID '{'
		(interfaceApplication+= InterfaceApplication)*
	'}'
;

InterfaceApplication:
	type=('HtmlView'|'RestFull') name=ID '=>' nameApp= ID
;


InfrastructureBlock:
	'infrastructure' '{'
		'basePackage' '=' basePackage=STRING
		'projectVersion' '=' projectVersion=STRING
		'language' '=' '{' language=NameVersion '}'
		'framework' '=' '{' framework=NameVersion '}'
		'orm' '=' '{' orm=NameVersion '}'
		'database' '=' '{' database=Database'}'
	'}'
;

Database:
	'@version' ':' versionValue=STRING ',' 
	'@name' ':' nameValue=STRING ',' 
	'@user' ':' userValue=STRING ','
	'@pass' ':' passValue=STRING ','
	'@host' ':' hostValue=STRING ','
	'@env' ':' envValue=STRING
;

NameVersion:
	'@name' ':' nameValue=STRING ','
	'@version' ':' versionValue=STRING
;


ApplicationBlock:
	'application' name=ID '{'
		('composedBy' applicationDomain+=ImportCompoundName)*	
	'}'
;

DomainBlock:
	'domain' name=ID '{'
		(module+=Module)*
	'}'
;

Module:
	'module' name=ID '{'
		(
			serviceBlock+=ServiceBlock|
			entityBlock+=EntityBlock|
			enumBlock+=EnumBlock
		)*
	'}'
;

ServiceBlock:
	'service' name=ID '{'
		(serviceFields+=ServiceMethod)*
	'}'
;

ServiceMethod:
	name=ID '=>' methodAcess=CompoundName
;

EntityBlock:
	acessModifier=(AccessModifier)? (isAbstract?='abstract')? 'entity' 
	name=ID classExtends=ExtendBlock? '{'
		(attributes+=Attribute)*
		
		repository=Repository?
	'}' 
;

Attribute:
	acessModifier=AccessModifier? type=DataType name=ID
;

Repository:
	'repository' name=ID '{'
		(methods+=RepositoryFields)*	
	'}'
;

RepositoryFields:
	nameMethod=ID '('methodsParameters=MethodParameter?')' ':' returnType=DataType
;

EnumBlock:
	'enum' name=ID '{'
		values+=ID (',' values+=ID)*
	'}'
;

DataType:
	(DataTypeList|DataTypeSet|CompoundName|'String'|'int'|'Integer'|'long'|'Long'|'boolean'|'Boolean'|'DateTime'|
  	'double'|'Double'|'float'|'Float'|'Object')
;
MethodParameter: typeAndAttr+=TypeAndAttribute (',' typeAndAttr+=TypeAndAttribute)*;
TypeAndAttribute: type=DataType name=ID;
ExtendBlock: Extend values+=CompoundName (',' values+=CompoundName)?;
Extend: ':';
DataTypeList: 'List''<'DataType'>';
DataTypeSet: 'Set''<'DataType'>';
AccessModifier: (Private|Protected);
Private:'-'|'private';
Protected:'#'|'protected';
ImportCompoundName: CompoundName('.*'?);
CompoundName: ID('.'ID)*;
