/*
 * generated by Xtext
 */
grammar InternalLedsCodeV001;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package br.edu.sr.ifes.leds.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.edu.sr.ifes.leds.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.edu.sr.ifes.leds.services.LedsCodeV001GrammarAccess;

}

@parser::members {

 	private LedsCodeV001GrammarAccess grammarAccess;
 	
    public InternalLedsCodeV001Parser(TokenStream input, LedsCodeV001GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LedsCodeDSL";	
   	}
   	
   	@Override
   	protected LedsCodeV001GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLedsCodeDSL
entryRuleLedsCodeDSL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLedsCodeDSLRule()); }
	 iv_ruleLedsCodeDSL=ruleLedsCodeDSL 
	 { $current=$iv_ruleLedsCodeDSL.current; } 
	 EOF 
;

// Rule LedsCodeDSL
ruleLedsCodeDSL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLedsCodeDSLAccess().getProjectProjectParserRuleCall_0()); 
	    }
		lv_project_0_0=ruleProject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLedsCodeDSLRule());
	        }
       		add(
       			$current, 
       			"project",
        		lv_project_0_0, 
        		"Project");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	 iv_ruleProject=ruleProject 
	 { $current=$iv_ruleProject.current; } 
	 EOF 
;

// Rule Project
ruleProject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='project' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProjectAccess().getProjectKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProjectAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getInfrastructureBlockInfrastructureBlockParserRuleCall_3_0()); 
	    }
		lv_infrastructureBlock_3_0=ruleInfrastructureBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		set(
       			$current, 
       			"infrastructureBlock",
        		lv_infrastructureBlock_3_0, 
        		"InfrastructureBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getInterfaceBlockInterfaceBlockParserRuleCall_4_0()); 
	    }
		lv_interfaceBlock_4_0=ruleInterfaceBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		set(
       			$current, 
       			"interfaceBlock",
        		lv_interfaceBlock_4_0, 
        		"InterfaceBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getApplicationBlockApplicationBlockParserRuleCall_5_0()); 
	    }
		lv_applicationBlock_5_0=ruleApplicationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"applicationBlock",
        		lv_applicationBlock_5_0, 
        		"ApplicationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProjectAccess().getDomainBlockDomainBlockParserRuleCall_6_0()); 
	    }
		lv_domainBlock_6_0=ruleDomainBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProjectRule());
	        }
       		add(
       			$current, 
       			"domainBlock",
        		lv_domainBlock_6_0, 
        		"DomainBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleInterfaceBlock
entryRuleInterfaceBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceBlockRule()); }
	 iv_ruleInterfaceBlock=ruleInterfaceBlock 
	 { $current=$iv_ruleInterfaceBlock.current; } 
	 EOF 
;

// Rule InterfaceBlock
ruleInterfaceBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceBlockAccess().getInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInterfaceBlockAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceBlockAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceBlockAccess().getInterfaceApplicationInterfaceApplicationParserRuleCall_3_0()); 
	    }
		lv_interfaceApplication_3_0=ruleInterfaceApplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceBlockRule());
	        }
       		add(
       			$current, 
       			"interfaceApplication",
        		lv_interfaceApplication_3_0, 
        		"InterfaceApplication");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleInterfaceApplication
entryRuleInterfaceApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceApplicationRule()); }
	 iv_ruleInterfaceApplication=ruleInterfaceApplication 
	 { $current=$iv_ruleInterfaceApplication.current; } 
	 EOF 
;

// Rule InterfaceApplication
ruleInterfaceApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_type_0_1=	'HtmlView' 
    {
        newLeafNode(lv_type_0_1, grammarAccess.getInterfaceApplicationAccess().getTypeHtmlViewKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceApplicationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_1, null);
	    }

    |		lv_type_0_2=	'RestFull' 
    {
        newLeafNode(lv_type_0_2, grammarAccess.getInterfaceApplicationAccess().getTypeRestFullKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceApplicationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_2, null);
	    }

)

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInterfaceApplicationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceApplicationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceApplicationAccess().getEqualsSignGreaterThanSignKeyword_2());
    }
(
(
		lv_nameApp_3_0=RULE_ID
		{
			newLeafNode(lv_nameApp_3_0, grammarAccess.getInterfaceApplicationAccess().getNameAppIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceApplicationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameApp",
        		lv_nameApp_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleInfrastructureBlock
entryRuleInfrastructureBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInfrastructureBlockRule()); }
	 iv_ruleInfrastructureBlock=ruleInfrastructureBlock 
	 { $current=$iv_ruleInfrastructureBlock.current; } 
	 EOF 
;

// Rule InfrastructureBlock
ruleInfrastructureBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='infrastructure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInfrastructureBlockAccess().getInfrastructureKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInfrastructureBlockAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='basePackage' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInfrastructureBlockAccess().getBasePackageKeyword_2());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInfrastructureBlockAccess().getEqualsSignKeyword_3());
    }
(
(
		lv_basePackage_4_0=RULE_STRING
		{
			newLeafNode(lv_basePackage_4_0, grammarAccess.getInfrastructureBlockAccess().getBasePackageSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfrastructureBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"basePackage",
        		lv_basePackage_4_0, 
        		"STRING");
	    }

)
)	otherlv_5='projectVersion' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInfrastructureBlockAccess().getProjectVersionKeyword_5());
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInfrastructureBlockAccess().getEqualsSignKeyword_6());
    }
(
(
		lv_projectVersion_7_0=RULE_STRING
		{
			newLeafNode(lv_projectVersion_7_0, grammarAccess.getInfrastructureBlockAccess().getProjectVersionSTRINGTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfrastructureBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"projectVersion",
        		lv_projectVersion_7_0, 
        		"STRING");
	    }

)
)	otherlv_8='language' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInfrastructureBlockAccess().getLanguageKeyword_8());
    }
	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInfrastructureBlockAccess().getEqualsSignKeyword_9());
    }
	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getInfrastructureBlockAccess().getLeftCurlyBracketKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfrastructureBlockAccess().getLanguageNameVersionParserRuleCall_11_0()); 
	    }
		lv_language_11_0=ruleNameVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfrastructureBlockRule());
	        }
       		set(
       			$current, 
       			"language",
        		lv_language_11_0, 
        		"NameVersion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getInfrastructureBlockAccess().getRightCurlyBracketKeyword_12());
    }
	otherlv_13='framework' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getInfrastructureBlockAccess().getFrameworkKeyword_13());
    }
	otherlv_14='=' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getInfrastructureBlockAccess().getEqualsSignKeyword_14());
    }
	otherlv_15='{' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getInfrastructureBlockAccess().getLeftCurlyBracketKeyword_15());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfrastructureBlockAccess().getFrameworkNameVersionParserRuleCall_16_0()); 
	    }
		lv_framework_16_0=ruleNameVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfrastructureBlockRule());
	        }
       		set(
       			$current, 
       			"framework",
        		lv_framework_16_0, 
        		"NameVersion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getInfrastructureBlockAccess().getRightCurlyBracketKeyword_17());
    }
	otherlv_18='orm' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getInfrastructureBlockAccess().getOrmKeyword_18());
    }
	otherlv_19='=' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getInfrastructureBlockAccess().getEqualsSignKeyword_19());
    }
	otherlv_20='{' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getInfrastructureBlockAccess().getLeftCurlyBracketKeyword_20());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfrastructureBlockAccess().getOrmNameVersionParserRuleCall_21_0()); 
	    }
		lv_orm_21_0=ruleNameVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfrastructureBlockRule());
	        }
       		set(
       			$current, 
       			"orm",
        		lv_orm_21_0, 
        		"NameVersion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_22='}' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getInfrastructureBlockAccess().getRightCurlyBracketKeyword_22());
    }
	otherlv_23='database' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getInfrastructureBlockAccess().getDatabaseKeyword_23());
    }
	otherlv_24='=' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getInfrastructureBlockAccess().getEqualsSignKeyword_24());
    }
	otherlv_25='{' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getInfrastructureBlockAccess().getLeftCurlyBracketKeyword_25());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfrastructureBlockAccess().getDatabaseDatabaseBlockParserRuleCall_26_0()); 
	    }
		lv_database_26_0=ruleDatabaseBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfrastructureBlockRule());
	        }
       		set(
       			$current, 
       			"database",
        		lv_database_26_0, 
        		"DatabaseBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_27='}' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getInfrastructureBlockAccess().getRightCurlyBracketKeyword_27());
    }
	otherlv_28='}' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getInfrastructureBlockAccess().getRightCurlyBracketKeyword_28());
    }
)
;





// Entry rule entryRuleDatabaseBlock
entryRuleDatabaseBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseBlockRule()); }
	 iv_ruleDatabaseBlock=ruleDatabaseBlock 
	 { $current=$iv_ruleDatabaseBlock.current; } 
	 EOF 
;

// Rule DatabaseBlock
ruleDatabaseBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@version' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDatabaseBlockAccess().getVersionKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDatabaseBlockAccess().getColonKeyword_1());
    }
(
(
		lv_versionValue_2_0=RULE_STRING
		{
			newLeafNode(lv_versionValue_2_0, grammarAccess.getDatabaseBlockAccess().getVersionValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"versionValue",
        		lv_versionValue_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDatabaseBlockAccess().getCommaKeyword_3());
    }
	otherlv_4='@name' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDatabaseBlockAccess().getNameKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDatabaseBlockAccess().getColonKeyword_5());
    }
(
(
		lv_nameValue_6_0=RULE_STRING
		{
			newLeafNode(lv_nameValue_6_0, grammarAccess.getDatabaseBlockAccess().getNameValueSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameValue",
        		lv_nameValue_6_0, 
        		"STRING");
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDatabaseBlockAccess().getCommaKeyword_7());
    }
	otherlv_8='@user' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDatabaseBlockAccess().getUserKeyword_8());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDatabaseBlockAccess().getColonKeyword_9());
    }
(
(
		lv_userValue_10_0=RULE_STRING
		{
			newLeafNode(lv_userValue_10_0, grammarAccess.getDatabaseBlockAccess().getUserValueSTRINGTerminalRuleCall_10_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"userValue",
        		lv_userValue_10_0, 
        		"STRING");
	    }

)
)	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDatabaseBlockAccess().getCommaKeyword_11());
    }
	otherlv_12='@pass' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDatabaseBlockAccess().getPassKeyword_12());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDatabaseBlockAccess().getColonKeyword_13());
    }
(
(
		lv_passValue_14_0=RULE_STRING
		{
			newLeafNode(lv_passValue_14_0, grammarAccess.getDatabaseBlockAccess().getPassValueSTRINGTerminalRuleCall_14_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"passValue",
        		lv_passValue_14_0, 
        		"STRING");
	    }

)
)	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDatabaseBlockAccess().getCommaKeyword_15());
    }
	otherlv_16='@host' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDatabaseBlockAccess().getHostKeyword_16());
    }
	otherlv_17=':' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDatabaseBlockAccess().getColonKeyword_17());
    }
(
(
		lv_hostValue_18_0=RULE_STRING
		{
			newLeafNode(lv_hostValue_18_0, grammarAccess.getDatabaseBlockAccess().getHostValueSTRINGTerminalRuleCall_18_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hostValue",
        		lv_hostValue_18_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleNameVersion
entryRuleNameVersion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameVersionRule()); }
	 iv_ruleNameVersion=ruleNameVersion 
	 { $current=$iv_ruleNameVersion.current; } 
	 EOF 
;

// Rule NameVersion
ruleNameVersion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@name' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNameVersionAccess().getNameKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNameVersionAccess().getColonKeyword_1());
    }
(
(
		lv_nameValue_2_0=RULE_STRING
		{
			newLeafNode(lv_nameValue_2_0, grammarAccess.getNameVersionAccess().getNameValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nameValue",
        		lv_nameValue_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNameVersionAccess().getCommaKeyword_3());
    }
	otherlv_4='@version' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNameVersionAccess().getVersionKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNameVersionAccess().getColonKeyword_5());
    }
(
(
		lv_versionValue_6_0=RULE_STRING
		{
			newLeafNode(lv_versionValue_6_0, grammarAccess.getNameVersionAccess().getVersionValueSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"versionValue",
        		lv_versionValue_6_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleApplicationBlock
entryRuleApplicationBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApplicationBlockRule()); }
	 iv_ruleApplicationBlock=ruleApplicationBlock 
	 { $current=$iv_ruleApplicationBlock.current; } 
	 EOF 
;

// Rule ApplicationBlock
ruleApplicationBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='application' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getApplicationBlockAccess().getApplicationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getApplicationBlockAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getApplicationBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getApplicationBlockAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='composedBy' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getApplicationBlockAccess().getComposedByKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationBlockAccess().getApplicationDomainImportCompoundNameParserRuleCall_3_1_0()); 
	    }
		lv_applicationDomain_4_0=ruleImportCompoundName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationBlockRule());
	        }
       		add(
       			$current, 
       			"applicationDomain",
        		lv_applicationDomain_4_0, 
        		"ImportCompoundName");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getApplicationBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDomainBlock
entryRuleDomainBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainBlockRule()); } 
	 iv_ruleDomainBlock=ruleDomainBlock 
	 { $current=$iv_ruleDomainBlock.current.getText(); }  
	 EOF 
;

// Rule DomainBlock
ruleDomainBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='domain' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDomainBlockAccess().getDomainKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDomainBlockAccess().getIDTerminalRuleCall_1()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDomainBlockAccess().getLeftCurlyBracketKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getDomainBlockAccess().getModuleBlockParserRuleCall_3()); 
    }
    this_ModuleBlock_3=ruleModuleBlock    {
		$current.merge(this_ModuleBlock_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDomainBlockAccess().getRightCurlyBracketKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleModuleBlock
entryRuleModuleBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleBlockRule()); } 
	 iv_ruleModuleBlock=ruleModuleBlock 
	 { $current=$iv_ruleModuleBlock.current.getText(); }  
	 EOF 
;

// Rule ModuleBlock
ruleModuleBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='module' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleBlockAccess().getModuleKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getModuleBlockAccess().getIDTerminalRuleCall_1()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleBlockAccess().getLeftCurlyBracketKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getModuleBlockAccess().getServiceBlockParserRuleCall_3_0()); 
    }
    this_ServiceBlock_3=ruleServiceBlock    {
		$current.merge(this_ServiceBlock_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleBlockAccess().getEntityBlockParserRuleCall_3_1()); 
    }
    this_EntityBlock_4=ruleEntityBlock    {
		$current.merge(this_EntityBlock_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleBlockAccess().getEnumBlockParserRuleCall_3_2()); 
    }
    this_EnumBlock_5=ruleEnumBlock    {
		$current.merge(this_EnumBlock_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModuleBlockAccess().getRightCurlyBracketKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleServiceBlock
entryRuleServiceBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceBlockRule()); } 
	 iv_ruleServiceBlock=ruleServiceBlock 
	 { $current=$iv_ruleServiceBlock.current.getText(); }  
	 EOF 
;

// Rule ServiceBlock
ruleServiceBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='service' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getServiceBlockAccess().getServiceKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getServiceBlockAccess().getIDTerminalRuleCall_1()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getServiceBlockAccess().getLeftCurlyBracketKeyword_2()); 
    }
(    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getServiceBlockAccess().getIDTerminalRuleCall_3_0()); 
    }

	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getServiceBlockAccess().getEqualsSignGreaterThanSignKeyword_3_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getServiceBlockAccess().getCompoundNameParserRuleCall_3_2()); 
    }
    this_CompoundName_5=ruleCompoundName    {
		$current.merge(this_CompoundName_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getServiceBlockAccess().getRightCurlyBracketKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleEntityBlock
entryRuleEntityBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityBlockRule()); } 
	 iv_ruleEntityBlock=ruleEntityBlock 
	 { $current=$iv_ruleEntityBlock.current.getText(); }  
	 EOF 
;

// Rule EntityBlock
ruleEntityBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getEntityBlockAccess().getAccessModifierParserRuleCall_0()); 
    }
    this_AccessModifier_0=ruleAccessModifier    {
		$current.merge(this_AccessModifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEntityBlockAccess().getAbstractKeyword_1()); 
    }
)?
	kw='entity' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEntityBlockAccess().getEntityKeyword_2()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getEntityBlockAccess().getIDTerminalRuleCall_3()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getEntityBlockAccess().getExtendBlockParserRuleCall_4()); 
    }
    this_ExtendBlock_4=ruleExtendBlock    {
		$current.merge(this_ExtendBlock_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getEntityBlockAccess().getImplementBlockParserRuleCall_5()); 
    }
    this_ImplementBlock_5=ruleImplementBlock    {
		$current.merge(this_ImplementBlock_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEntityBlockAccess().getLeftCurlyBracketKeyword_6()); 
    }
((
    { 
        newCompositeNode(grammarAccess.getEntityBlockAccess().getAccessModifierParserRuleCall_7_0()); 
    }
    this_AccessModifier_7=ruleAccessModifier    {
		$current.merge(this_AccessModifier_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getEntityBlockAccess().getDataTypeParserRuleCall_7_1()); 
    }
    this_DataType_8=ruleDataType    {
		$current.merge(this_DataType_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_ID_9=RULE_ID    {
		$current.merge(this_ID_9);
    }

    { 
    newLeafNode(this_ID_9, grammarAccess.getEntityBlockAccess().getIDTerminalRuleCall_7_2()); 
    }
)*(
    { 
        newCompositeNode(grammarAccess.getEntityBlockAccess().getRepositoryBlockParserRuleCall_8()); 
    }
    this_RepositoryBlock_10=ruleRepositoryBlock    {
		$current.merge(this_RepositoryBlock_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEntityBlockAccess().getRightCurlyBracketKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleRepositoryBlock
entryRuleRepositoryBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRepositoryBlockRule()); } 
	 iv_ruleRepositoryBlock=ruleRepositoryBlock 
	 { $current=$iv_ruleRepositoryBlock.current.getText(); }  
	 EOF 
;

// Rule RepositoryBlock
ruleRepositoryBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='repository' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRepositoryBlockAccess().getRepositoryKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getRepositoryBlockAccess().getIDTerminalRuleCall_1()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRepositoryBlockAccess().getLeftCurlyBracketKeyword_2()); 
    }
(    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getRepositoryBlockAccess().getIDTerminalRuleCall_3_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRepositoryBlockAccess().getLeftParenthesisKeyword_3_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getRepositoryBlockAccess().getMethodParameterParserRuleCall_3_2()); 
    }
    this_MethodParameter_5=ruleMethodParameter    {
		$current.merge(this_MethodParameter_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRepositoryBlockAccess().getRightParenthesisKeyword_3_3()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRepositoryBlockAccess().getColonKeyword_3_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getRepositoryBlockAccess().getDataTypeParserRuleCall_3_5()); 
    }
    this_DataType_8=ruleDataType    {
		$current.merge(this_DataType_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRepositoryBlockAccess().getRightCurlyBracketKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleEnumBlock
entryRuleEnumBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumBlockRule()); } 
	 iv_ruleEnumBlock=ruleEnumBlock 
	 { $current=$iv_ruleEnumBlock.current.getText(); }  
	 EOF 
;

// Rule EnumBlock
ruleEnumBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBlockAccess().getEnumKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEnumBlockAccess().getIDTerminalRuleCall_1()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBlockAccess().getLeftCurlyBracketKeyword_2()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getEnumBlockAccess().getIDTerminalRuleCall_3()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBlockAccess().getCommaKeyword_4_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getEnumBlockAccess().getIDTerminalRuleCall_4_1()); 
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBlockAccess().getRightCurlyBracketKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleDataType
entryRuleDataType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); } 
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current.getText(); }  
	 EOF 
;

// Rule DataType
ruleDataType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getDataTypeListParserRuleCall_0()); 
    }
    this_DataTypeList_0=ruleDataTypeList    {
		$current.merge(this_DataTypeList_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getDataTypeSetParserRuleCall_1()); 
    }
    this_DataTypeSet_1=ruleDataTypeSet    {
		$current.merge(this_DataTypeSet_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getCompoundNameParserRuleCall_2()); 
    }
    this_CompoundName_2=ruleCompoundName    {
		$current.merge(this_CompoundName_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getStringKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getIntKeyword_4()); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getIntegerKeyword_5()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getLongKeyword_6()); 
    }

    |
	kw='Long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getLongKeyword_7()); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getBooleanKeyword_8()); 
    }

    |
	kw='Boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getBooleanKeyword_9()); 
    }

    |
	kw='DateTime' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getDateTimeKeyword_10()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getDoubleKeyword_11()); 
    }

    |
	kw='Double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getDoubleKeyword_12()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getFloatKeyword_13()); 
    }

    |
	kw='Float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getFloatKeyword_14()); 
    }

    |
	kw='Object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeAccess().getObjectKeyword_15()); 
    }
)
    ;





// Entry rule entryRuleMethodParameter
entryRuleMethodParameter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodParameterRule()); } 
	 iv_ruleMethodParameter=ruleMethodParameter 
	 { $current=$iv_ruleMethodParameter.current.getText(); }  
	 EOF 
;

// Rule MethodParameter
ruleMethodParameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMethodParameterAccess().getDataTypeParserRuleCall_0()); 
    }
    this_DataType_0=ruleDataType    {
		$current.merge(this_DataType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getMethodParameterAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodParameterAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getMethodParameterAccess().getDataTypeParserRuleCall_2_1()); 
    }
    this_DataType_3=ruleDataType    {
		$current.merge(this_DataType_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getMethodParameterAccess().getIDTerminalRuleCall_2_2()); 
    }
)*)
    ;







// Entry rule entryRuleExtendBlock
entryRuleExtendBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendBlockRule()); } 
	 iv_ruleExtendBlock=ruleExtendBlock 
	 { $current=$iv_ruleExtendBlock.current.getText(); }  
	 EOF 
;

// Rule ExtendBlock
ruleExtendBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExtendBlockAccess().getExtendParserRuleCall_0()); 
    }
    this_Extend_0=ruleExtend    {
		$current.merge(this_Extend_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getExtendBlockAccess().getCompoundNameParserRuleCall_1()); 
    }
    this_CompoundName_1=ruleCompoundName    {
		$current.merge(this_CompoundName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleExtend
entryRuleExtend returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendRule()); } 
	 iv_ruleExtend=ruleExtend 
	 { $current=$iv_ruleExtend.current.getText(); }  
	 EOF 
;

// Rule Extend
ruleExtend returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='extend' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendAccess().getExtendKeyword_0()); 
    }

    |
	kw='ext' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendAccess().getExtKeyword_1()); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendAccess().getColonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleImplementBlock
entryRuleImplementBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementBlockRule()); } 
	 iv_ruleImplementBlock=ruleImplementBlock 
	 { $current=$iv_ruleImplementBlock.current.getText(); }  
	 EOF 
;

// Rule ImplementBlock
ruleImplementBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImplementBlockAccess().getImplementParserRuleCall_0()); 
    }
    this_Implement_0=ruleImplement    {
		$current.merge(this_Implement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getImplementBlockAccess().getCompoundNameParserRuleCall_1()); 
    }
    this_CompoundName_1=ruleCompoundName    {
		$current.merge(this_CompoundName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImplementBlockAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getImplementBlockAccess().getCompoundNameParserRuleCall_2_1()); 
    }
    this_CompoundName_3=ruleCompoundName    {
		$current.merge(this_CompoundName_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleImplement
entryRuleImplement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementRule()); } 
	 iv_ruleImplement=ruleImplement 
	 { $current=$iv_ruleImplement.current.getText(); }  
	 EOF 
;

// Rule Implement
ruleImplement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='implement' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImplementAccess().getImplementKeyword_0()); 
    }

    |
	kw='imp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImplementAccess().getImpKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImplementAccess().getGreaterThanSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleDataTypeList
entryRuleDataTypeList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeListRule()); } 
	 iv_ruleDataTypeList=ruleDataTypeList 
	 { $current=$iv_ruleDataTypeList.current.getText(); }  
	 EOF 
;

// Rule DataTypeList
ruleDataTypeList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='List' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeListAccess().getListKeyword_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeListAccess().getLessThanSignKeyword_1()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getDataTypeListAccess().getIDTerminalRuleCall_2()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeListAccess().getGreaterThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleDataTypeSet
entryRuleDataTypeSet returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeSetRule()); } 
	 iv_ruleDataTypeSet=ruleDataTypeSet 
	 { $current=$iv_ruleDataTypeSet.current.getText(); }  
	 EOF 
;

// Rule DataTypeSet
ruleDataTypeSet returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Set' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeSetAccess().getSetKeyword_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeSetAccess().getLessThanSignKeyword_1()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getDataTypeSetAccess().getIDTerminalRuleCall_2()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDataTypeSetAccess().getGreaterThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleAccessModifier
entryRuleAccessModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessModifierRule()); } 
	 iv_ruleAccessModifier=ruleAccessModifier 
	 { $current=$iv_ruleAccessModifier.current.getText(); }  
	 EOF 
;

// Rule AccessModifier
ruleAccessModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessModifierAccess().getPrivateParserRuleCall_0()); 
    }
    this_Private_0=rulePrivate    {
		$current.merge(this_Private_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAccessModifierAccess().getProtectedParserRuleCall_1()); 
    }
    this_Protected_1=ruleProtected    {
		$current.merge(this_Protected_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePrivate
entryRulePrivate returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrivateRule()); } 
	 iv_rulePrivate=rulePrivate 
	 { $current=$iv_rulePrivate.current.getText(); }  
	 EOF 
;

// Rule Private
rulePrivate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrivateAccess().getHyphenMinusKeyword()); 
    }

    ;





// Entry rule entryRuleProtected
entryRuleProtected returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProtectedRule()); } 
	 iv_ruleProtected=ruleProtected 
	 { $current=$iv_ruleProtected.current.getText(); }  
	 EOF 
;

// Rule Protected
ruleProtected returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getProtectedAccess().getNumberSignKeyword()); 
    }

    ;





// Entry rule entryRuleImportCompoundName
entryRuleImportCompoundName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportCompoundNameRule()); } 
	 iv_ruleImportCompoundName=ruleImportCompoundName 
	 { $current=$iv_ruleImportCompoundName.current.getText(); }  
	 EOF 
;

// Rule ImportCompoundName
ruleImportCompoundName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImportCompoundNameAccess().getCompoundNameParserRuleCall_0()); 
    }
    this_CompoundName_0=ruleCompoundName    {
		$current.merge(this_CompoundName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportCompoundNameAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleCompoundName
entryRuleCompoundName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundNameRule()); } 
	 iv_ruleCompoundName=ruleCompoundName 
	 { $current=$iv_ruleCompoundName.current.getText(); }  
	 EOF 
;

// Rule CompoundName
ruleCompoundName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getCompoundNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompoundNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getCompoundNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


