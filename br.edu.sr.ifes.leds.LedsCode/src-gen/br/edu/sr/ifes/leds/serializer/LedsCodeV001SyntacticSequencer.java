/*
 * generated by Xtext
 */
package br.edu.sr.ifes.leds.serializer;

import br.edu.sr.ifes.leds.services.LedsCodeV001GrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LedsCodeV001SyntacticSequencer extends AbstractSyntacticSequencer {

	protected LedsCodeV001GrammarAccess grammarAccess;
	protected AbstractElementAlias match_Attribute_BetweenKeyword_3_5_0_p;
	protected AbstractElementAlias match_Attribute_MaxKeyword_3_4_0_p;
	protected AbstractElementAlias match_Attribute_MinKeyword_3_3_0_p;
	protected AbstractElementAlias match_Attribute_NullKeyword_3_2_0_p;
	protected AbstractElementAlias match_Attribute_UniqueKeyword_3_1_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LedsCodeV001GrammarAccess) access;
		match_Attribute_BetweenKeyword_3_5_0_p = new TokenAlias(true, false, grammarAccess.getAttributeAccess().getBetweenKeyword_3_5_0());
		match_Attribute_MaxKeyword_3_4_0_p = new TokenAlias(true, false, grammarAccess.getAttributeAccess().getMaxKeyword_3_4_0());
		match_Attribute_MinKeyword_3_3_0_p = new TokenAlias(true, false, grammarAccess.getAttributeAccess().getMinKeyword_3_3_0());
		match_Attribute_NullKeyword_3_2_0_p = new TokenAlias(true, false, grammarAccess.getAttributeAccess().getNullKeyword_3_2_0());
		match_Attribute_UniqueKeyword_3_1_0_p = new TokenAlias(true, false, grammarAccess.getAttributeAccess().getUniqueKeyword_3_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getExtendRule())
			return getExtendToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Extend: ':';
	 */
	protected String getExtendToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Attribute_BetweenKeyword_3_5_0_p.equals(syntax))
				emit_Attribute_BetweenKeyword_3_5_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Attribute_MaxKeyword_3_4_0_p.equals(syntax))
				emit_Attribute_MaxKeyword_3_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Attribute_MinKeyword_3_3_0_p.equals(syntax))
				emit_Attribute_MinKeyword_3_3_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Attribute_NullKeyword_3_2_0_p.equals(syntax))
				emit_Attribute_NullKeyword_3_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Attribute_UniqueKeyword_3_1_0_p.equals(syntax))
				emit_Attribute_UniqueKeyword_3_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '@between'+
	 *
	 * This ambiguous syntax occurs at:
	 *     max=INTEGER ')' (ambiguity) '(' min=INTEGER
	 *     min=INTEGER ')' (ambiguity) '(' min=INTEGER
	 *     name=ID (ambiguity) '(' min=INTEGER
	 *     nullable=BOOLEAN ')' (ambiguity) '(' min=INTEGER
	 *     pk?='@pk' (ambiguity) '(' min=INTEGER
	 *     unique=BOOLEAN ')' (ambiguity) '(' min=INTEGER
	 */
	protected void emit_Attribute_BetweenKeyword_3_5_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@max'+
	 *
	 * This ambiguous syntax occurs at:
	 *     max=INTEGER ')' (ambiguity) '(' max=INTEGER
	 *     min=INTEGER ')' (ambiguity) '(' max=INTEGER
	 *     name=ID (ambiguity) '(' max=INTEGER
	 *     nullable=BOOLEAN ')' (ambiguity) '(' max=INTEGER
	 *     pk?='@pk' (ambiguity) '(' max=INTEGER
	 *     unique=BOOLEAN ')' (ambiguity) '(' max=INTEGER
	 */
	protected void emit_Attribute_MaxKeyword_3_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@min'+
	 *
	 * This ambiguous syntax occurs at:
	 *     max=INTEGER ')' (ambiguity) '(' min=INTEGER
	 *     min=INTEGER ')' (ambiguity) '(' min=INTEGER
	 *     name=ID (ambiguity) '(' min=INTEGER
	 *     nullable=BOOLEAN ')' (ambiguity) '(' min=INTEGER
	 *     pk?='@pk' (ambiguity) '(' min=INTEGER
	 *     unique=BOOLEAN ')' (ambiguity) '(' min=INTEGER
	 */
	protected void emit_Attribute_MinKeyword_3_3_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@null'+
	 *
	 * This ambiguous syntax occurs at:
	 *     max=INTEGER ')' (ambiguity) '(' nullable=BOOLEAN
	 *     min=INTEGER ')' (ambiguity) '(' nullable=BOOLEAN
	 *     name=ID (ambiguity) '(' nullable=BOOLEAN
	 *     nullable=BOOLEAN ')' (ambiguity) '(' nullable=BOOLEAN
	 *     pk?='@pk' (ambiguity) '(' nullable=BOOLEAN
	 *     unique=BOOLEAN ')' (ambiguity) '(' nullable=BOOLEAN
	 */
	protected void emit_Attribute_NullKeyword_3_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '@unique'+
	 *
	 * This ambiguous syntax occurs at:
	 *     max=INTEGER ')' (ambiguity) '(' unique=BOOLEAN
	 *     min=INTEGER ')' (ambiguity) '(' unique=BOOLEAN
	 *     name=ID (ambiguity) '(' unique=BOOLEAN
	 *     nullable=BOOLEAN ')' (ambiguity) '(' unique=BOOLEAN
	 *     pk?='@pk' (ambiguity) '(' unique=BOOLEAN
	 *     unique=BOOLEAN ')' (ambiguity) '(' unique=BOOLEAN
	 */
	protected void emit_Attribute_UniqueKeyword_3_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
