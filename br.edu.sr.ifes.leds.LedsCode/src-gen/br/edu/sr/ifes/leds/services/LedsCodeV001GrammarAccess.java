/*
 * generated by Xtext
 */
package br.edu.sr.ifes.leds.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LedsCodeV001GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LedsCodeDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LedsCodeDSL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cApplicationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cApplicationApplicationParserRuleCall_0_0 = (RuleCall)cApplicationAssignment_0.eContents().get(0);
		private final RuleCall cModuleAplicationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LedsCodeDSL:
		//	application=Application | ModuleAplication+;
		@Override public ParserRule getRule() { return rule; }

		//application=Application | ModuleAplication+
		public Alternatives getAlternatives() { return cAlternatives; }

		//application=Application
		public Assignment getApplicationAssignment_0() { return cApplicationAssignment_0; }

		//Application
		public RuleCall getApplicationApplicationParserRuleCall_0_0() { return cApplicationApplicationParserRuleCall_0_0; }

		//ModuleAplication+
		public RuleCall getModuleAplicationParserRuleCall_1() { return cModuleAplicationParserRuleCall_1; }
	}

	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameApplicationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameApplicationNameApplicationParserRuleCall_2_0 = (RuleCall)cNameApplicationAssignment_2.eContents().get(0);
		private final Assignment cLanguageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLanguageLanguageParserRuleCall_3_0 = (RuleCall)cLanguageAssignment_3.eContents().get(0);
		private final Assignment cFrameworkAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrameworkFrameworkParserRuleCall_4_0 = (RuleCall)cFrameworkAssignment_4.eContents().get(0);
		private final Assignment cOrmAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOrmORMParserRuleCall_5_0 = (RuleCall)cOrmAssignment_5.eContents().get(0);
		private final Assignment cDatabaseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDatabaseDataBaseParserRuleCall_6_0 = (RuleCall)cDatabaseAssignment_6.eContents().get(0);
		private final RuleCall cModuleAplicationParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Application:
		//	"app" "{" nameApplication=NameApplication //version=VersionApplication
		//	language=Language framework=Framework orm=ORM database=DataBase ModuleAplication "}";
		@Override public ParserRule getRule() { return rule; }

		//"app" "{" nameApplication=NameApplication //version=VersionApplication
		//language=Language framework=Framework orm=ORM database=DataBase ModuleAplication "}"
		public Group getGroup() { return cGroup; }

		//"app"
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//nameApplication=NameApplication
		public Assignment getNameApplicationAssignment_2() { return cNameApplicationAssignment_2; }

		//NameApplication
		public RuleCall getNameApplicationNameApplicationParserRuleCall_2_0() { return cNameApplicationNameApplicationParserRuleCall_2_0; }

		////version=VersionApplication
		//language=Language
		public Assignment getLanguageAssignment_3() { return cLanguageAssignment_3; }

		//Language
		public RuleCall getLanguageLanguageParserRuleCall_3_0() { return cLanguageLanguageParserRuleCall_3_0; }

		//framework=Framework
		public Assignment getFrameworkAssignment_4() { return cFrameworkAssignment_4; }

		//Framework
		public RuleCall getFrameworkFrameworkParserRuleCall_4_0() { return cFrameworkFrameworkParserRuleCall_4_0; }

		//orm=ORM
		public Assignment getOrmAssignment_5() { return cOrmAssignment_5; }

		//ORM
		public RuleCall getOrmORMParserRuleCall_5_0() { return cOrmORMParserRuleCall_5_0; }

		//database=DataBase
		public Assignment getDatabaseAssignment_6() { return cDatabaseAssignment_6; }

		//DataBase
		public RuleCall getDatabaseDataBaseParserRuleCall_6_0() { return cDatabaseDataBaseParserRuleCall_6_0; }

		//ModuleAplication
		public RuleCall getModuleAplicationParserRuleCall_7() { return cModuleAplicationParserRuleCall_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ModuleAplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleAplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ModuleAplication:
		//	"module" "{" "}";
		@Override public ParserRule getRule() { return rule; }

		//"module" "{" "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class NameApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameUNQUOTED_STRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//NameApplication:
		//	"name" "=" name=UNQUOTED_STRING;
		@Override public ParserRule getRule() { return rule; }

		//"name" "=" name=UNQUOTED_STRING
		public Group getGroup() { return cGroup; }

		//"name"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//name=UNQUOTED_STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//UNQUOTED_STRING
		public RuleCall getNameUNQUOTED_STRINGTerminalRuleCall_2_0() { return cNameUNQUOTED_STRINGTerminalRuleCall_2_0; }
	}

	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Language");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLanguageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDictionaryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// *VersionApplication:
		//	'version''='VersionValue
		//;
		//
		//VersionValue:
		//	VERSION_ONE_DIGITE | VERSION_TWO_DIGITE | VERSION_THREE_DIGITE
		//;* / Language:
		//	"language" Dictionary;
		@Override public ParserRule getRule() { return rule; }

		//"language" Dictionary
		public Group getGroup() { return cGroup; }

		//"language"
		public Keyword getLanguageKeyword_0() { return cLanguageKeyword_0; }

		//Dictionary
		public RuleCall getDictionaryParserRuleCall_1() { return cDictionaryParserRuleCall_1; }
	}

	public class FrameworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Framework");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrameworkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDictionaryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Framework:
		//	"framework" Dictionary;
		@Override public ParserRule getRule() { return rule; }

		//"framework" Dictionary
		public Group getGroup() { return cGroup; }

		//"framework"
		public Keyword getFrameworkKeyword_0() { return cFrameworkKeyword_0; }

		//Dictionary
		public RuleCall getDictionaryParserRuleCall_1() { return cDictionaryParserRuleCall_1; }
	}

	public class ORMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ORM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDictionaryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ORM:
		//	"orm" Dictionary;
		@Override public ParserRule getRule() { return rule; }

		//"orm" Dictionary
		public Group getGroup() { return cGroup; }

		//"orm"
		public Keyword getOrmKeyword_0() { return cOrmKeyword_0; }

		//Dictionary
		public RuleCall getDictionaryParserRuleCall_1() { return cDictionaryParserRuleCall_1; }
	}

	public class DataBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDictionaryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DataBase:
		//	"database" Dictionary;
		@Override public ParserRule getRule() { return rule; }

		//"database" Dictionary
		public Group getGroup() { return cGroup; }

		//"database"
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }

		//Dictionary
		public RuleCall getDictionaryParserRuleCall_1() { return cDictionaryParserRuleCall_1; }
	}

	public class DictionaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dictionary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsKeyValueParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsKeyValueParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Dictionary:
		//	"{" elements+=KeyValue ("," elements+=KeyValue)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" elements+=KeyValue ("," elements+=KeyValue)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//elements+=KeyValue
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//KeyValue
		public RuleCall getElementsKeyValueParserRuleCall_1_0() { return cElementsKeyValueParserRuleCall_1_0; }

		//("," elements+=KeyValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//elements+=KeyValue
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//KeyValue
		public RuleCall getElementsKeyValueParserRuleCall_2_1_0() { return cElementsKeyValueParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class KeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//KeyValue:
		//	key=ID ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//key=ID ":" value=STRING
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final LedsCodeDSLElements pLedsCodeDSL;
	private final ApplicationElements pApplication;
	private final ModuleAplicationElements pModuleAplication;
	private final NameApplicationElements pNameApplication;
	private final LanguageElements pLanguage;
	private final FrameworkElements pFramework;
	private final ORMElements pORM;
	private final DataBaseElements pDataBase;
	private final DictionaryElements pDictionary;
	private final KeyValueElements pKeyValue;
	private final TerminalRule tINT;
	private final TerminalRule tUNQUOTED_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tOL_COMMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LedsCodeV001GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLedsCodeDSL = new LedsCodeDSLElements();
		this.pApplication = new ApplicationElements();
		this.pModuleAplication = new ModuleAplicationElements();
		this.pNameApplication = new NameApplicationElements();
		this.pLanguage = new LanguageElements();
		this.pFramework = new FrameworkElements();
		this.pORM = new ORMElements();
		this.pDataBase = new DataBaseElements();
		this.pDictionary = new DictionaryElements();
		this.pKeyValue = new KeyValueElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tUNQUOTED_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNQUOTED_STRING");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tOL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.edu.sr.ifes.leds.LedsCodeV001".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LedsCodeDSL:
	//	application=Application | ModuleAplication+;
	public LedsCodeDSLElements getLedsCodeDSLAccess() {
		return pLedsCodeDSL;
	}
	
	public ParserRule getLedsCodeDSLRule() {
		return getLedsCodeDSLAccess().getRule();
	}

	//Application:
	//	"app" "{" nameApplication=NameApplication //version=VersionApplication
	//	language=Language framework=Framework orm=ORM database=DataBase ModuleAplication "}";
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}

	//ModuleAplication:
	//	"module" "{" "}";
	public ModuleAplicationElements getModuleAplicationAccess() {
		return pModuleAplication;
	}
	
	public ParserRule getModuleAplicationRule() {
		return getModuleAplicationAccess().getRule();
	}

	//NameApplication:
	//	"name" "=" name=UNQUOTED_STRING;
	public NameApplicationElements getNameApplicationAccess() {
		return pNameApplication;
	}
	
	public ParserRule getNameApplicationRule() {
		return getNameApplicationAccess().getRule();
	}

	/// *VersionApplication:
	//	'version''='VersionValue
	//;
	//
	//VersionValue:
	//	VERSION_ONE_DIGITE | VERSION_TWO_DIGITE | VERSION_THREE_DIGITE
	//;* / Language:
	//	"language" Dictionary;
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	//Framework:
	//	"framework" Dictionary;
	public FrameworkElements getFrameworkAccess() {
		return pFramework;
	}
	
	public ParserRule getFrameworkRule() {
		return getFrameworkAccess().getRule();
	}

	//ORM:
	//	"orm" Dictionary;
	public ORMElements getORMAccess() {
		return pORM;
	}
	
	public ParserRule getORMRule() {
		return getORMAccess().getRule();
	}

	//DataBase:
	//	"database" Dictionary;
	public DataBaseElements getDataBaseAccess() {
		return pDataBase;
	}
	
	public ParserRule getDataBaseRule() {
		return getDataBaseAccess().getRule();
	}

	//Dictionary:
	//	"{" elements+=KeyValue ("," elements+=KeyValue)* "}";
	public DictionaryElements getDictionaryAccess() {
		return pDictionary;
	}
	
	public ParserRule getDictionaryRule() {
		return getDictionaryAccess().getRule();
	}

	//KeyValue:
	//	key=ID ":" value=STRING;
	public KeyValueElements getKeyValueAccess() {
		return pKeyValue;
	}
	
	public ParserRule getKeyValueRule() {
		return getKeyValueAccess().getRule();
	}

	/// *
	//terminal VERSION_ONE_DIGITE: ('0'..'9')+;
	//terminal VERSION_TWO_DIGITE: VERSION_ONE_DIGITE.VERSION_ONE_DIGITE;
	//terminal VERSION_THREE_DIGITE: VERSION_TWO_DIGITE.VERSION_ONE_DIGITE;
	// * / //https://www.eclipse.org/forums/index.php/t/944715/
	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal UNQUOTED_STRING:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getUNQUOTED_STRINGRule() {
		return tUNQUOTED_STRING;
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal OL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getOL_COMMENTRule() {
		return tOL_COMMENT;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
