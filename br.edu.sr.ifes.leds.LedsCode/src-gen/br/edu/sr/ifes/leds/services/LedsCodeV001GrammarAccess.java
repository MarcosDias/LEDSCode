/*
 * generated by Xtext
 */
package br.edu.sr.ifes.leds.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LedsCodeV001GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LedsCodeDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LedsCodeDSL");
		private final Assignment cProjectAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProjectProjectParserRuleCall_0 = (RuleCall)cProjectAssignment.eContents().get(0);
		
		/// *
		//============== LEDSCode ============== 
		// * / LedsCodeDSL:
		//	project+=Project;
		@Override public ParserRule getRule() { return rule; }

		//project+=Project
		public Assignment getProjectAssignment() { return cProjectAssignment; }

		//Project
		public RuleCall getProjectProjectParserRuleCall_0() { return cProjectProjectParserRuleCall_0; }
	}

	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInfrastructureBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInfrastructureBlockInfrastructureBlockParserRuleCall_3_0 = (RuleCall)cInfrastructureBlockAssignment_3.eContents().get(0);
		private final Assignment cInterfaceBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInterfaceBlockInterfaceBlockParserRuleCall_4_0 = (RuleCall)cInterfaceBlockAssignment_4.eContents().get(0);
		private final Assignment cApplicationBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cApplicationBlockApplicationBlockParserRuleCall_5_0 = (RuleCall)cApplicationBlockAssignment_5.eContents().get(0);
		private final Assignment cDomainBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDomainBlockDomainBlockParserRuleCall_6_0 = (RuleCall)cDomainBlockAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Project:
		//	"project" name=ID "{" infrastructureBlock=InfrastructureBlock interfaceBlock=InterfaceBlock?
		//	applicationBlock+=ApplicationBlock* domainBlock+=DomainBlock+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"project" name=ID "{" infrastructureBlock=InfrastructureBlock interfaceBlock=InterfaceBlock?
		//applicationBlock+=ApplicationBlock* domainBlock+=DomainBlock+ "}"
		public Group getGroup() { return cGroup; }

		//"project"
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//infrastructureBlock=InfrastructureBlock
		public Assignment getInfrastructureBlockAssignment_3() { return cInfrastructureBlockAssignment_3; }

		//InfrastructureBlock
		public RuleCall getInfrastructureBlockInfrastructureBlockParserRuleCall_3_0() { return cInfrastructureBlockInfrastructureBlockParserRuleCall_3_0; }

		//interfaceBlock=InterfaceBlock?
		public Assignment getInterfaceBlockAssignment_4() { return cInterfaceBlockAssignment_4; }

		//InterfaceBlock
		public RuleCall getInterfaceBlockInterfaceBlockParserRuleCall_4_0() { return cInterfaceBlockInterfaceBlockParserRuleCall_4_0; }

		//applicationBlock+=ApplicationBlock*
		public Assignment getApplicationBlockAssignment_5() { return cApplicationBlockAssignment_5; }

		//ApplicationBlock
		public RuleCall getApplicationBlockApplicationBlockParserRuleCall_5_0() { return cApplicationBlockApplicationBlockParserRuleCall_5_0; }

		//domainBlock+=DomainBlock+
		public Assignment getDomainBlockAssignment_6() { return cDomainBlockAssignment_6; }

		//DomainBlock
		public RuleCall getDomainBlockDomainBlockParserRuleCall_6_0() { return cDomainBlockDomainBlockParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class InterfaceBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterfaceApplicationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInterfaceApplicationInterfaceApplicationParserRuleCall_3_0 = (RuleCall)cInterfaceApplicationAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfaceBlock:
		//	"interface" name=ID "{" interfaceApplication+=InterfaceApplication* "}";
		@Override public ParserRule getRule() { return rule; }

		//"interface" name=ID "{" interfaceApplication+=InterfaceApplication* "}"
		public Group getGroup() { return cGroup; }

		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//interfaceApplication+=InterfaceApplication*
		public Assignment getInterfaceApplicationAssignment_3() { return cInterfaceApplicationAssignment_3; }

		//InterfaceApplication
		public RuleCall getInterfaceApplicationInterfaceApplicationParserRuleCall_3_0() { return cInterfaceApplicationInterfaceApplicationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InterfaceApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeHtmlViewKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeRestFullKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAppAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameAppIDTerminalRuleCall_3_0 = (RuleCall)cNameAppAssignment_3.eContents().get(0);
		
		//InterfaceApplication:
		//	type=("HtmlView" | "RestFull") name=ID "=>" nameApp=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=("HtmlView" | "RestFull") name=ID "=>" nameApp=ID
		public Group getGroup() { return cGroup; }

		//type=("HtmlView" | "RestFull")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"HtmlView" | "RestFull"
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//"HtmlView"
		public Keyword getTypeHtmlViewKeyword_0_0_0() { return cTypeHtmlViewKeyword_0_0_0; }

		//"RestFull"
		public Keyword getTypeRestFullKeyword_0_0_1() { return cTypeRestFullKeyword_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }

		//nameApp=ID
		public Assignment getNameAppAssignment_3() { return cNameAppAssignment_3; }

		//ID
		public RuleCall getNameAppIDTerminalRuleCall_3_0() { return cNameAppIDTerminalRuleCall_3_0; }
	}

	public class InfrastructureBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InfrastructureBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInfrastructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBasePackageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBasePackageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBasePackageSTRINGTerminalRuleCall_4_0 = (RuleCall)cBasePackageAssignment_4.eContents().get(0);
		private final Keyword cProjectVersionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cProjectVersionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cProjectVersionSTRINGTerminalRuleCall_7_0 = (RuleCall)cProjectVersionAssignment_7.eContents().get(0);
		private final Keyword cLanguageKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cLanguageAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cLanguageNameVersionParserRuleCall_11_0 = (RuleCall)cLanguageAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cFrameworkKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cEqualsSignKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cLeftCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cFrameworkAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cFrameworkNameVersionParserRuleCall_16_0 = (RuleCall)cFrameworkAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cOrmKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cEqualsSignKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cLeftCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cOrmAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cOrmNameVersionParserRuleCall_21_0 = (RuleCall)cOrmAssignment_21.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Keyword cDatabaseKeyword_23 = (Keyword)cGroup.eContents().get(23);
		private final Keyword cEqualsSignKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Keyword cLeftCurlyBracketKeyword_25 = (Keyword)cGroup.eContents().get(25);
		private final Assignment cDatabaseAssignment_26 = (Assignment)cGroup.eContents().get(26);
		private final RuleCall cDatabaseDatabaseParserRuleCall_26_0 = (RuleCall)cDatabaseAssignment_26.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_27 = (Keyword)cGroup.eContents().get(27);
		private final Keyword cRightCurlyBracketKeyword_28 = (Keyword)cGroup.eContents().get(28);
		
		//InfrastructureBlock:
		//	"infrastructure" "{" "basePackage" "=" basePackage=STRING "projectVersion" "=" projectVersion=STRING "language" "="
		//	"{" language=NameVersion "}" "framework" "=" "{" framework=NameVersion "}" "orm" "=" "{" orm=NameVersion "}"
		//	"database" "=" "{" database=Database "}" "}";
		@Override public ParserRule getRule() { return rule; }

		//"infrastructure" "{" "basePackage" "=" basePackage=STRING "projectVersion" "=" projectVersion=STRING "language" "=" "{"
		//language=NameVersion "}" "framework" "=" "{" framework=NameVersion "}" "orm" "=" "{" orm=NameVersion "}" "database" "="
		//"{" database=Database "}" "}"
		public Group getGroup() { return cGroup; }

		//"infrastructure"
		public Keyword getInfrastructureKeyword_0() { return cInfrastructureKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"basePackage"
		public Keyword getBasePackageKeyword_2() { return cBasePackageKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//basePackage=STRING
		public Assignment getBasePackageAssignment_4() { return cBasePackageAssignment_4; }

		//STRING
		public RuleCall getBasePackageSTRINGTerminalRuleCall_4_0() { return cBasePackageSTRINGTerminalRuleCall_4_0; }

		//"projectVersion"
		public Keyword getProjectVersionKeyword_5() { return cProjectVersionKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//projectVersion=STRING
		public Assignment getProjectVersionAssignment_7() { return cProjectVersionAssignment_7; }

		//STRING
		public RuleCall getProjectVersionSTRINGTerminalRuleCall_7_0() { return cProjectVersionSTRINGTerminalRuleCall_7_0; }

		//"language"
		public Keyword getLanguageKeyword_8() { return cLanguageKeyword_8; }

		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }

		//language=NameVersion
		public Assignment getLanguageAssignment_11() { return cLanguageAssignment_11; }

		//NameVersion
		public RuleCall getLanguageNameVersionParserRuleCall_11_0() { return cLanguageNameVersionParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }

		//"framework"
		public Keyword getFrameworkKeyword_13() { return cFrameworkKeyword_13; }

		//"="
		public Keyword getEqualsSignKeyword_14() { return cEqualsSignKeyword_14; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_15() { return cLeftCurlyBracketKeyword_15; }

		//framework=NameVersion
		public Assignment getFrameworkAssignment_16() { return cFrameworkAssignment_16; }

		//NameVersion
		public RuleCall getFrameworkNameVersionParserRuleCall_16_0() { return cFrameworkNameVersionParserRuleCall_16_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }

		//"orm"
		public Keyword getOrmKeyword_18() { return cOrmKeyword_18; }

		//"="
		public Keyword getEqualsSignKeyword_19() { return cEqualsSignKeyword_19; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_20() { return cLeftCurlyBracketKeyword_20; }

		//orm=NameVersion
		public Assignment getOrmAssignment_21() { return cOrmAssignment_21; }

		//NameVersion
		public RuleCall getOrmNameVersionParserRuleCall_21_0() { return cOrmNameVersionParserRuleCall_21_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }

		//"database"
		public Keyword getDatabaseKeyword_23() { return cDatabaseKeyword_23; }

		//"="
		public Keyword getEqualsSignKeyword_24() { return cEqualsSignKeyword_24; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_25() { return cLeftCurlyBracketKeyword_25; }

		//database=Database
		public Assignment getDatabaseAssignment_26() { return cDatabaseAssignment_26; }

		//Database
		public RuleCall getDatabaseDatabaseParserRuleCall_26_0() { return cDatabaseDatabaseParserRuleCall_26_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_27() { return cRightCurlyBracketKeyword_27; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_28() { return cRightCurlyBracketKeyword_28; }
	}

	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVersionValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cVersionValueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameValueSTRINGTerminalRuleCall_6_0 = (RuleCall)cNameValueAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cUserKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cUserValueAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cUserValueSTRINGTerminalRuleCall_8_2_0 = (RuleCall)cUserValueAssignment_8_2.eContents().get(0);
		private final Keyword cCommaKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cPassKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cColonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cPassValueAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cPassValueSTRINGTerminalRuleCall_9_2_0 = (RuleCall)cPassValueAssignment_9_2.eContents().get(0);
		private final Keyword cCommaKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cHostKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cColonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cHostValueAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cHostValueSTRINGTerminalRuleCall_10_2_0 = (RuleCall)cHostValueAssignment_10_2.eContents().get(0);
		private final Keyword cCommaKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cEnvKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cColonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cEnvValueAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cEnvValueSTRINGTerminalRuleCall_11_2_0 = (RuleCall)cEnvValueAssignment_11_2.eContents().get(0);
		private final Keyword cCommaKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		
		//Database:
		//	"@version" ":" versionValue=STRING "," "@name" ":" nameValue=STRING "," ("@user" ":" userValue=STRING ",")? ("@pass"
		//	":" passValue=STRING ",")? ("@host" ":" hostValue=STRING ",")? ("@env" ":" envValue=STRING ",")?;
		@Override public ParserRule getRule() { return rule; }

		//"@version" ":" versionValue=STRING "," "@name" ":" nameValue=STRING "," ("@user" ":" userValue=STRING ",")? ("@pass" ":"
		//passValue=STRING ",")? ("@host" ":" hostValue=STRING ",")? ("@env" ":" envValue=STRING ",")?
		public Group getGroup() { return cGroup; }

		//"@version"
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//versionValue=STRING
		public Assignment getVersionValueAssignment_2() { return cVersionValueAssignment_2; }

		//STRING
		public RuleCall getVersionValueSTRINGTerminalRuleCall_2_0() { return cVersionValueSTRINGTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"@name"
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//nameValue=STRING
		public Assignment getNameValueAssignment_6() { return cNameValueAssignment_6; }

		//STRING
		public RuleCall getNameValueSTRINGTerminalRuleCall_6_0() { return cNameValueSTRINGTerminalRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//("@user" ":" userValue=STRING ",")?
		public Group getGroup_8() { return cGroup_8; }

		//"@user"
		public Keyword getUserKeyword_8_0() { return cUserKeyword_8_0; }

		//":"
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }

		//userValue=STRING
		public Assignment getUserValueAssignment_8_2() { return cUserValueAssignment_8_2; }

		//STRING
		public RuleCall getUserValueSTRINGTerminalRuleCall_8_2_0() { return cUserValueSTRINGTerminalRuleCall_8_2_0; }

		//","
		public Keyword getCommaKeyword_8_3() { return cCommaKeyword_8_3; }

		//("@pass" ":" passValue=STRING ",")?
		public Group getGroup_9() { return cGroup_9; }

		//"@pass"
		public Keyword getPassKeyword_9_0() { return cPassKeyword_9_0; }

		//":"
		public Keyword getColonKeyword_9_1() { return cColonKeyword_9_1; }

		//passValue=STRING
		public Assignment getPassValueAssignment_9_2() { return cPassValueAssignment_9_2; }

		//STRING
		public RuleCall getPassValueSTRINGTerminalRuleCall_9_2_0() { return cPassValueSTRINGTerminalRuleCall_9_2_0; }

		//","
		public Keyword getCommaKeyword_9_3() { return cCommaKeyword_9_3; }

		//("@host" ":" hostValue=STRING ",")?
		public Group getGroup_10() { return cGroup_10; }

		//"@host"
		public Keyword getHostKeyword_10_0() { return cHostKeyword_10_0; }

		//":"
		public Keyword getColonKeyword_10_1() { return cColonKeyword_10_1; }

		//hostValue=STRING
		public Assignment getHostValueAssignment_10_2() { return cHostValueAssignment_10_2; }

		//STRING
		public RuleCall getHostValueSTRINGTerminalRuleCall_10_2_0() { return cHostValueSTRINGTerminalRuleCall_10_2_0; }

		//","
		public Keyword getCommaKeyword_10_3() { return cCommaKeyword_10_3; }

		//("@env" ":" envValue=STRING ",")?
		public Group getGroup_11() { return cGroup_11; }

		//"@env"
		public Keyword getEnvKeyword_11_0() { return cEnvKeyword_11_0; }

		//":"
		public Keyword getColonKeyword_11_1() { return cColonKeyword_11_1; }

		//envValue=STRING
		public Assignment getEnvValueAssignment_11_2() { return cEnvValueAssignment_11_2; }

		//STRING
		public RuleCall getEnvValueSTRINGTerminalRuleCall_11_2_0() { return cEnvValueSTRINGTerminalRuleCall_11_2_0; }

		//","
		public Keyword getCommaKeyword_11_3() { return cCommaKeyword_11_3; }
	}

	public class NameVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameValueAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cVersionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVersionValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVersionValueSTRINGTerminalRuleCall_6_0 = (RuleCall)cVersionValueAssignment_6.eContents().get(0);
		
		//NameVersion:
		//	"@name" ":" nameValue=STRING "," "@version" ":" versionValue=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@name" ":" nameValue=STRING "," "@version" ":" versionValue=STRING
		public Group getGroup() { return cGroup; }

		//"@name"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//nameValue=STRING
		public Assignment getNameValueAssignment_2() { return cNameValueAssignment_2; }

		//STRING
		public RuleCall getNameValueSTRINGTerminalRuleCall_2_0() { return cNameValueSTRINGTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"@version"
		public Keyword getVersionKeyword_4() { return cVersionKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//versionValue=STRING
		public Assignment getVersionValueAssignment_6() { return cVersionValueAssignment_6; }

		//STRING
		public RuleCall getVersionValueSTRINGTerminalRuleCall_6_0() { return cVersionValueSTRINGTerminalRuleCall_6_0; }
	}

	public class ApplicationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplicationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cComposedByKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cApplicationDomainAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cApplicationDomainImportCompoundNameParserRuleCall_3_1_0 = (RuleCall)cApplicationDomainAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ApplicationBlock:
		//	"application" name=ID "{" ("composedBy" applicationDomain+=ImportCompoundName)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"application" name=ID "{" ("composedBy" applicationDomain+=ImportCompoundName)* "}"
		public Group getGroup() { return cGroup; }

		//"application"
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("composedBy" applicationDomain+=ImportCompoundName)*
		public Group getGroup_3() { return cGroup_3; }

		//"composedBy"
		public Keyword getComposedByKeyword_3_0() { return cComposedByKeyword_3_0; }

		//applicationDomain+=ImportCompoundName
		public Assignment getApplicationDomainAssignment_3_1() { return cApplicationDomainAssignment_3_1; }

		//ImportCompoundName
		public RuleCall getApplicationDomainImportCompoundNameParserRuleCall_3_1_0() { return cApplicationDomainImportCompoundNameParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DomainBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModuleModuleBlockParserRuleCall_3_0 = (RuleCall)cModuleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DomainBlock:
		//	"domain" name=ID "{" module+=ModuleBlock* "}";
		@Override public ParserRule getRule() { return rule; }

		//"domain" name=ID "{" module+=ModuleBlock* "}"
		public Group getGroup() { return cGroup; }

		//"domain"
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//module+=ModuleBlock*
		public Assignment getModuleAssignment_3() { return cModuleAssignment_3; }

		//ModuleBlock
		public RuleCall getModuleModuleBlockParserRuleCall_3_0() { return cModuleModuleBlockParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ModuleBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEnumBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cEnumBlockEnumBlockParserRuleCall_3_0_0 = (RuleCall)cEnumBlockAssignment_3_0.eContents().get(0);
		private final Assignment cEntityBlockAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cEntityBlockEntityBlockParserRuleCall_3_1_0 = (RuleCall)cEntityBlockAssignment_3_1.eContents().get(0);
		private final Assignment cServiceBlockAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cServiceBlockServiceBlockParserRuleCall_3_2_0 = (RuleCall)cServiceBlockAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ModuleBlock:
		//	"module" name=ID "{" (enumBlock+=EnumBlock | entityBlock+=EntityBlock | serviceBlock+=ServiceBlock)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"module" name=ID "{" (enumBlock+=EnumBlock | entityBlock+=EntityBlock | serviceBlock+=ServiceBlock)* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(enumBlock+=EnumBlock | entityBlock+=EntityBlock | serviceBlock+=ServiceBlock)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//enumBlock+=EnumBlock
		public Assignment getEnumBlockAssignment_3_0() { return cEnumBlockAssignment_3_0; }

		//EnumBlock
		public RuleCall getEnumBlockEnumBlockParserRuleCall_3_0_0() { return cEnumBlockEnumBlockParserRuleCall_3_0_0; }

		//entityBlock+=EntityBlock
		public Assignment getEntityBlockAssignment_3_1() { return cEntityBlockAssignment_3_1; }

		//EntityBlock
		public RuleCall getEntityBlockEntityBlockParserRuleCall_3_1_0() { return cEntityBlockEntityBlockParserRuleCall_3_1_0; }

		//serviceBlock+=ServiceBlock
		public Assignment getServiceBlockAssignment_3_2() { return cServiceBlockAssignment_3_2; }

		//ServiceBlock
		public RuleCall getServiceBlockServiceBlockParserRuleCall_3_2_0() { return cServiceBlockServiceBlockParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ServiceBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cServiceFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServiceFieldsServiceMethodParserRuleCall_3_0 = (RuleCall)cServiceFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ServiceBlock:
		//	"service" name=ID "{" serviceFields+=ServiceMethod* "}";
		@Override public ParserRule getRule() { return rule; }

		//"service" name=ID "{" serviceFields+=ServiceMethod* "}"
		public Group getGroup() { return cGroup; }

		//"service"
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//serviceFields+=ServiceMethod*
		public Assignment getServiceFieldsAssignment_3() { return cServiceFieldsAssignment_3; }

		//ServiceMethod
		public RuleCall getServiceFieldsServiceMethodParserRuleCall_3_0() { return cServiceFieldsServiceMethodParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ServiceMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodAcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMethodAcessRepositoryFieldsCrossReference_2_0 = (CrossReference)cMethodAcessAssignment_2.eContents().get(0);
		private final RuleCall cMethodAcessRepositoryFieldsCompoundNameParserRuleCall_2_0_1 = (RuleCall)cMethodAcessRepositoryFieldsCrossReference_2_0.eContents().get(1);
		
		//ServiceMethod:
		//	name=ID "=>" methodAcess=[RepositoryFields|CompoundName];
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=>" methodAcess=[RepositoryFields|CompoundName]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//methodAcess=[RepositoryFields|CompoundName]
		public Assignment getMethodAcessAssignment_2() { return cMethodAcessAssignment_2; }

		//[RepositoryFields|CompoundName]
		public CrossReference getMethodAcessRepositoryFieldsCrossReference_2_0() { return cMethodAcessRepositoryFieldsCrossReference_2_0; }

		//CompoundName
		public RuleCall getMethodAcessRepositoryFieldsCompoundNameParserRuleCall_2_0_1() { return cMethodAcessRepositoryFieldsCompoundNameParserRuleCall_2_0_1; }
	}

	public class EntityBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAcessModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAcessModifierAccessModifierParserRuleCall_0_0 = (RuleCall)cAcessModifierAssignment_0.eContents().get(0);
		private final Assignment cIsAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsAbstractAbstractKeyword_1_0 = (Keyword)cIsAbstractAssignment_1.eContents().get(0);
		private final Keyword cEntityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cClassExtendsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassExtendsExtendBlockParserRuleCall_4_0 = (RuleCall)cClassExtendsAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesAttributeParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Assignment cRepositoryAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRepositoryRepositoryParserRuleCall_7_0 = (RuleCall)cRepositoryAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EntityBlock:
		//	acessModifier=AccessModifier? isAbstract?="abstract"? "entity" name=ID classExtends=ExtendBlock? "{"
		//	attributes+=Attribute* repository=Repository? "}";
		@Override public ParserRule getRule() { return rule; }

		//acessModifier=AccessModifier? isAbstract?="abstract"? "entity" name=ID classExtends=ExtendBlock? "{"
		//attributes+=Attribute* repository=Repository? "}"
		public Group getGroup() { return cGroup; }

		//acessModifier=AccessModifier?
		public Assignment getAcessModifierAssignment_0() { return cAcessModifierAssignment_0; }

		//AccessModifier
		public RuleCall getAcessModifierAccessModifierParserRuleCall_0_0() { return cAcessModifierAccessModifierParserRuleCall_0_0; }

		//isAbstract?="abstract"?
		public Assignment getIsAbstractAssignment_1() { return cIsAbstractAssignment_1; }

		//"abstract"
		public Keyword getIsAbstractAbstractKeyword_1_0() { return cIsAbstractAbstractKeyword_1_0; }

		//"entity"
		public Keyword getEntityKeyword_2() { return cEntityKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//classExtends=ExtendBlock?
		public Assignment getClassExtendsAssignment_4() { return cClassExtendsAssignment_4; }

		//ExtendBlock
		public RuleCall getClassExtendsExtendBlockParserRuleCall_4_0() { return cClassExtendsExtendBlockParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_0() { return cAttributesAttributeParserRuleCall_6_0; }

		//repository=Repository?
		public Assignment getRepositoryAssignment_7() { return cRepositoryAssignment_7; }

		//Repository
		public RuleCall getRepositoryRepositoryParserRuleCall_7_0() { return cRepositoryRepositoryParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAcessModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAcessModifierAccessModifierParserRuleCall_0_0 = (RuleCall)cAcessModifierAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPkAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cPkPkKeyword_3_0_0 = (Keyword)cPkAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cUniqueKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cUniqueAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cUniqueBOOLEANParserRuleCall_3_1_2_0 = (RuleCall)cUniqueAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Keyword cNullKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cNullableAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cNullableBOOLEANParserRuleCall_3_2_2_0 = (RuleCall)cNullableAssignment_3_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2_3 = (Keyword)cGroup_3_2.eContents().get(3);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cMinKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cMinAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cMinINTEGERParserRuleCall_3_3_2_0 = (RuleCall)cMinAssignment_3_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3_3 = (Keyword)cGroup_3_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cAlternatives_3.eContents().get(4);
		private final Keyword cMaxKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cMaxAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cMaxINTEGERParserRuleCall_3_4_2_0 = (RuleCall)cMaxAssignment_3_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4_3 = (Keyword)cGroup_3_4.eContents().get(3);
		private final Group cGroup_3_5 = (Group)cAlternatives_3.eContents().get(5);
		private final Keyword cBetweenKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_5_1 = (Keyword)cGroup_3_5.eContents().get(1);
		private final Assignment cMinAssignment_3_5_2 = (Assignment)cGroup_3_5.eContents().get(2);
		private final RuleCall cMinINTEGERParserRuleCall_3_5_2_0 = (RuleCall)cMinAssignment_3_5_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_5_3 = (Keyword)cGroup_3_5.eContents().get(3);
		private final Assignment cMaxAssignment_3_5_4 = (Assignment)cGroup_3_5.eContents().get(4);
		private final RuleCall cMaxINTEGERParserRuleCall_3_5_4_0 = (RuleCall)cMaxAssignment_3_5_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5_5 = (Keyword)cGroup_3_5.eContents().get(5);
		
		//Attribute:
		//	acessModifier=AccessModifier? type=DataType name=ID (pk?="@pk" // Nao permitir usar between junto de max ou min
		//	| "@unique"+ "(" unique=BOOLEAN ")" | "@null"+ "(" nullable=BOOLEAN ")" | "@min"+ "(" min=INTEGER ")" | "@max"+ "("
		//	max=INTEGER ")" | "@between"+ "(" min=INTEGER "," max=INTEGER ")")*;
		@Override public ParserRule getRule() { return rule; }

		//acessModifier=AccessModifier? type=DataType name=ID (pk?="@pk" // Nao permitir usar between junto de max ou min
		//| "@unique"+ "(" unique=BOOLEAN ")" | "@null"+ "(" nullable=BOOLEAN ")" | "@min"+ "(" min=INTEGER ")" | "@max"+ "("
		//max=INTEGER ")" | "@between"+ "(" min=INTEGER "," max=INTEGER ")")*
		public Group getGroup() { return cGroup; }

		//acessModifier=AccessModifier?
		public Assignment getAcessModifierAssignment_0() { return cAcessModifierAssignment_0; }

		//AccessModifier
		public RuleCall getAcessModifierAccessModifierParserRuleCall_0_0() { return cAcessModifierAccessModifierParserRuleCall_0_0; }

		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(pk?="@pk" // Nao permitir usar between junto de max ou min
		//| "@unique"+ "(" unique=BOOLEAN ")" | "@null"+ "(" nullable=BOOLEAN ")" | "@min"+ "(" min=INTEGER ")" | "@max"+ "("
		//max=INTEGER ")" | "@between"+ "(" min=INTEGER "," max=INTEGER ")")*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//pk?="@pk"
		public Assignment getPkAssignment_3_0() { return cPkAssignment_3_0; }

		//"@pk"
		public Keyword getPkPkKeyword_3_0_0() { return cPkPkKeyword_3_0_0; }

		//"@unique"+ "(" unique=BOOLEAN ")"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"@unique"+
		public Keyword getUniqueKeyword_3_1_0() { return cUniqueKeyword_3_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1_1() { return cLeftParenthesisKeyword_3_1_1; }

		//unique=BOOLEAN
		public Assignment getUniqueAssignment_3_1_2() { return cUniqueAssignment_3_1_2; }

		//BOOLEAN
		public RuleCall getUniqueBOOLEANParserRuleCall_3_1_2_0() { return cUniqueBOOLEANParserRuleCall_3_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_1_3() { return cRightParenthesisKeyword_3_1_3; }

		//"@null"+ "(" nullable=BOOLEAN ")"
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"@null"+
		public Keyword getNullKeyword_3_2_0() { return cNullKeyword_3_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2_1() { return cLeftParenthesisKeyword_3_2_1; }

		//nullable=BOOLEAN
		public Assignment getNullableAssignment_3_2_2() { return cNullableAssignment_3_2_2; }

		//BOOLEAN
		public RuleCall getNullableBOOLEANParserRuleCall_3_2_2_0() { return cNullableBOOLEANParserRuleCall_3_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2_3() { return cRightParenthesisKeyword_3_2_3; }

		//"@min"+ "(" min=INTEGER ")"
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"@min"+
		public Keyword getMinKeyword_3_3_0() { return cMinKeyword_3_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_3_1() { return cLeftParenthesisKeyword_3_3_1; }

		//min=INTEGER
		public Assignment getMinAssignment_3_3_2() { return cMinAssignment_3_3_2; }

		//INTEGER
		public RuleCall getMinINTEGERParserRuleCall_3_3_2_0() { return cMinINTEGERParserRuleCall_3_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3_3() { return cRightParenthesisKeyword_3_3_3; }

		//"@max"+ "(" max=INTEGER ")"
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"@max"+
		public Keyword getMaxKeyword_3_4_0() { return cMaxKeyword_3_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_4_1() { return cLeftParenthesisKeyword_3_4_1; }

		//max=INTEGER
		public Assignment getMaxAssignment_3_4_2() { return cMaxAssignment_3_4_2; }

		//INTEGER
		public RuleCall getMaxINTEGERParserRuleCall_3_4_2_0() { return cMaxINTEGERParserRuleCall_3_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4_3() { return cRightParenthesisKeyword_3_4_3; }

		//"@between"+ "(" min=INTEGER "," max=INTEGER ")"
		public Group getGroup_3_5() { return cGroup_3_5; }

		//"@between"+
		public Keyword getBetweenKeyword_3_5_0() { return cBetweenKeyword_3_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_5_1() { return cLeftParenthesisKeyword_3_5_1; }

		//min=INTEGER
		public Assignment getMinAssignment_3_5_2() { return cMinAssignment_3_5_2; }

		//INTEGER
		public RuleCall getMinINTEGERParserRuleCall_3_5_2_0() { return cMinINTEGERParserRuleCall_3_5_2_0; }

		//","
		public Keyword getCommaKeyword_3_5_3() { return cCommaKeyword_3_5_3; }

		//max=INTEGER
		public Assignment getMaxAssignment_3_5_4() { return cMaxAssignment_3_5_4; }

		//INTEGER
		public RuleCall getMaxINTEGERParserRuleCall_3_5_4_0() { return cMaxINTEGERParserRuleCall_3_5_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_5_5() { return cRightParenthesisKeyword_3_5_5; }
	}

	public class RepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Repository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodsRepositoryFieldsParserRuleCall_3_0 = (RuleCall)cMethodsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Repository:
		//	"repository" name=ID "{" methods+=RepositoryFields* "}";
		@Override public ParserRule getRule() { return rule; }

		//"repository" name=ID "{" methods+=RepositoryFields* "}"
		public Group getGroup() { return cGroup; }

		//"repository"
		public Keyword getRepositoryKeyword_0() { return cRepositoryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//methods+=RepositoryFields*
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }

		//RepositoryFields
		public RuleCall getMethodsRepositoryFieldsParserRuleCall_3_0() { return cMethodsRepositoryFieldsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RepositoryFieldsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepositoryFields");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodsParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodsParametersMethodParameterParserRuleCall_2_0 = (RuleCall)cMethodsParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeDataTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		
		//RepositoryFields:
		//	name=ID "(" methodsParameters=MethodParameter? ")" ":" returnType=DataType;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "(" methodsParameters=MethodParameter? ")" ":" returnType=DataType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//methodsParameters=MethodParameter?
		public Assignment getMethodsParametersAssignment_2() { return cMethodsParametersAssignment_2; }

		//MethodParameter
		public RuleCall getMethodsParametersMethodParameterParserRuleCall_2_0() { return cMethodsParametersMethodParameterParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//returnType=DataType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }

		//DataType
		public RuleCall getReturnTypeDataTypeParserRuleCall_5_0() { return cReturnTypeDataTypeParserRuleCall_5_0; }
	}

	public class EnumBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesIDTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesIDTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumBlock:
		//	"enum" name=ID "{" values+=ID ("," values+=ID)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" values+=ID ("," values+=ID)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//values+=ID
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//ID
		public RuleCall getValuesIDTerminalRuleCall_3_0() { return cValuesIDTerminalRuleCall_3_0; }

		//("," values+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//values+=ID
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }

		//ID
		public RuleCall getValuesIDTerminalRuleCall_4_1_0() { return cValuesIDTerminalRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompoundNameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIntegerKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLongKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBooleanKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cBooleanKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cDatetimeKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cDoubleKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cDoubleKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cFloatKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cFloatKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//DataType:
		//	DataTypeList | DataTypeSet | CompoundName | "String" | "int" | "Integer" | "long" | "Long" | "boolean" | "Boolean" |
		//	"Datetime" | "double" | "Double" | "float" | "Float";
		@Override public ParserRule getRule() { return rule; }

		//DataTypeList | DataTypeSet | CompoundName | "String" | "int" | "Integer" | "long" | "Long" | "boolean" | "Boolean" |
		//"Datetime" | "double" | "Double" | "float" | "Float"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataTypeList
		public RuleCall getDataTypeListParserRuleCall_0() { return cDataTypeListParserRuleCall_0; }

		//DataTypeSet
		public RuleCall getDataTypeSetParserRuleCall_1() { return cDataTypeSetParserRuleCall_1; }

		//CompoundName
		public RuleCall getCompoundNameParserRuleCall_2() { return cCompoundNameParserRuleCall_2; }

		//"String"
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"Integer"
		public Keyword getIntegerKeyword_5() { return cIntegerKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"Long"
		public Keyword getLongKeyword_7() { return cLongKeyword_7; }

		//"boolean"
		public Keyword getBooleanKeyword_8() { return cBooleanKeyword_8; }

		//"Boolean"
		public Keyword getBooleanKeyword_9() { return cBooleanKeyword_9; }

		//"Datetime"
		public Keyword getDatetimeKeyword_10() { return cDatetimeKeyword_10; }

		//"double"
		public Keyword getDoubleKeyword_11() { return cDoubleKeyword_11; }

		//"Double"
		public Keyword getDoubleKeyword_12() { return cDoubleKeyword_12; }

		//"float"
		public Keyword getFloatKeyword_13() { return cFloatKeyword_13; }

		//"Float"
		public Keyword getFloatKeyword_14() { return cFloatKeyword_14; }
	}

	public class MethodParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAndAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAndAttrTypeAndAttributeParserRuleCall_0_0 = (RuleCall)cTypeAndAttrAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAndAttrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeAndAttrTypeAndAttributeParserRuleCall_1_1_0 = (RuleCall)cTypeAndAttrAssignment_1_1.eContents().get(0);
		
		//MethodParameter:
		//	typeAndAttr+=TypeAndAttribute ("," typeAndAttr+=TypeAndAttribute)*;
		@Override public ParserRule getRule() { return rule; }

		//typeAndAttr+=TypeAndAttribute ("," typeAndAttr+=TypeAndAttribute)*
		public Group getGroup() { return cGroup; }

		//typeAndAttr+=TypeAndAttribute
		public Assignment getTypeAndAttrAssignment_0() { return cTypeAndAttrAssignment_0; }

		//TypeAndAttribute
		public RuleCall getTypeAndAttrTypeAndAttributeParserRuleCall_0_0() { return cTypeAndAttrTypeAndAttributeParserRuleCall_0_0; }

		//("," typeAndAttr+=TypeAndAttribute)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//typeAndAttr+=TypeAndAttribute
		public Assignment getTypeAndAttrAssignment_1_1() { return cTypeAndAttrAssignment_1_1; }

		//TypeAndAttribute
		public RuleCall getTypeAndAttrTypeAndAttributeParserRuleCall_1_1_0() { return cTypeAndAttrTypeAndAttributeParserRuleCall_1_1_0; }
	}

	public class TypeAndAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeAndAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TypeAndAttribute:
		//	type=DataType name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=DataType name=ID
		public Group getGroup() { return cGroup; }

		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ExtendBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExtendParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuesEntityBlockCrossReference_1_0 = (CrossReference)cValuesAssignment_1.eContents().get(0);
		private final RuleCall cValuesEntityBlockCompoundNameParserRuleCall_1_0_1 = (RuleCall)cValuesEntityBlockCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cValuesEntityBlockCrossReference_2_1_0 = (CrossReference)cValuesAssignment_2_1.eContents().get(0);
		private final RuleCall cValuesEntityBlockCompoundNameParserRuleCall_2_1_0_1 = (RuleCall)cValuesEntityBlockCrossReference_2_1_0.eContents().get(1);
		
		//ExtendBlock:
		//	Extend values+=[EntityBlock|CompoundName] ("," values+=[EntityBlock|CompoundName])?;
		@Override public ParserRule getRule() { return rule; }

		//Extend values+=[EntityBlock|CompoundName] ("," values+=[EntityBlock|CompoundName])?
		public Group getGroup() { return cGroup; }

		//Extend
		public RuleCall getExtendParserRuleCall_0() { return cExtendParserRuleCall_0; }

		//values+=[EntityBlock|CompoundName]
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//[EntityBlock|CompoundName]
		public CrossReference getValuesEntityBlockCrossReference_1_0() { return cValuesEntityBlockCrossReference_1_0; }

		//CompoundName
		public RuleCall getValuesEntityBlockCompoundNameParserRuleCall_1_0_1() { return cValuesEntityBlockCompoundNameParserRuleCall_1_0_1; }

		//("," values+=[EntityBlock|CompoundName])?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=[EntityBlock|CompoundName]
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//[EntityBlock|CompoundName]
		public CrossReference getValuesEntityBlockCrossReference_2_1_0() { return cValuesEntityBlockCrossReference_2_1_0; }

		//CompoundName
		public RuleCall getValuesEntityBlockCompoundNameParserRuleCall_2_1_0_1() { return cValuesEntityBlockCompoundNameParserRuleCall_2_1_0_1; }
	}

	public class ExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extend");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExtendsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExtKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Extend:
		//	":" | "extends" | "ext";
		@Override public ParserRule getRule() { return rule; }

		//":" | "extends" | "ext"
		public Alternatives getAlternatives() { return cAlternatives; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//"extends"
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }

		//"ext"
		public Keyword getExtKeyword_2() { return cExtKeyword_2; }
	}

	public class DataTypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataTypeList:
		//	"List" "<" DataType ">";
		@Override public ParserRule getRule() { return rule; }

		//"List" "<" DataType ">"
		public Group getGroup() { return cGroup; }

		//"List"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_2() { return cDataTypeParserRuleCall_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class DataTypeSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataTypeSet:
		//	"Set" "<" DataType ">";
		@Override public ParserRule getRule() { return rule; }

		//"Set" "<" DataType ">"
		public Group getGroup() { return cGroup; }

		//"Set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_2() { return cDataTypeParserRuleCall_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class AccessModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrivateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProtectedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AccessModifier:
		//	Private | Protected;
		@Override public ParserRule getRule() { return rule; }

		//Private | Protected
		public Alternatives getAlternatives() { return cAlternatives; }

		//Private
		public RuleCall getPrivateParserRuleCall_0() { return cPrivateParserRuleCall_0; }

		//Protected
		public RuleCall getProtectedParserRuleCall_1() { return cProtectedParserRuleCall_1; }
	}

	public class PrivateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Private");
		private final Keyword cPrivateKeyword = (Keyword)rule.eContents().get(1);
		
		//Private:
		//	"private";
		@Override public ParserRule getRule() { return rule; }

		//"private"
		public Keyword getPrivateKeyword() { return cPrivateKeyword; }
	}

	public class ProtectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protected");
		private final Keyword cProtectedKeyword = (Keyword)rule.eContents().get(1);
		
		//Protected:
		//	"protected";
		@Override public ParserRule getRule() { return rule; }

		//"protected"
		public Keyword getProtectedKeyword() { return cProtectedKeyword; }
	}

	public class ImportCompoundNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportCompoundName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompoundNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ImportCompoundName:
		//	CompoundName ".*"?;
		@Override public ParserRule getRule() { return rule; }

		//CompoundName ".*"?
		public Group getGroup() { return cGroup; }

		//CompoundName
		public RuleCall getCompoundNameParserRuleCall_0() { return cCompoundNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class CompoundNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CompoundName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTEGER returns ecore::EIntegerObject:
		//	INT+;
		@Override public ParserRule getRule() { return rule; }

		//INT+
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final LedsCodeDSLElements pLedsCodeDSL;
	private final ProjectElements pProject;
	private final InterfaceBlockElements pInterfaceBlock;
	private final InterfaceApplicationElements pInterfaceApplication;
	private final InfrastructureBlockElements pInfrastructureBlock;
	private final DatabaseElements pDatabase;
	private final NameVersionElements pNameVersion;
	private final ApplicationBlockElements pApplicationBlock;
	private final DomainBlockElements pDomainBlock;
	private final ModuleBlockElements pModuleBlock;
	private final ServiceBlockElements pServiceBlock;
	private final ServiceMethodElements pServiceMethod;
	private final EntityBlockElements pEntityBlock;
	private final AttributeElements pAttribute;
	private final RepositoryElements pRepository;
	private final RepositoryFieldsElements pRepositoryFields;
	private final EnumBlockElements pEnumBlock;
	private final DataTypeElements pDataType;
	private final MethodParameterElements pMethodParameter;
	private final TypeAndAttributeElements pTypeAndAttribute;
	private final ExtendBlockElements pExtendBlock;
	private final ExtendElements pExtend;
	private final DataTypeListElements pDataTypeList;
	private final DataTypeSetElements pDataTypeSet;
	private final AccessModifierElements pAccessModifier;
	private final PrivateElements pPrivate;
	private final ProtectedElements pProtected;
	private final ImportCompoundNameElements pImportCompoundName;
	private final CompoundNameElements pCompoundName;
	private final BOOLEANElements pBOOLEAN;
	private final INTEGERElements pINTEGER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LedsCodeV001GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLedsCodeDSL = new LedsCodeDSLElements();
		this.pProject = new ProjectElements();
		this.pInterfaceBlock = new InterfaceBlockElements();
		this.pInterfaceApplication = new InterfaceApplicationElements();
		this.pInfrastructureBlock = new InfrastructureBlockElements();
		this.pDatabase = new DatabaseElements();
		this.pNameVersion = new NameVersionElements();
		this.pApplicationBlock = new ApplicationBlockElements();
		this.pDomainBlock = new DomainBlockElements();
		this.pModuleBlock = new ModuleBlockElements();
		this.pServiceBlock = new ServiceBlockElements();
		this.pServiceMethod = new ServiceMethodElements();
		this.pEntityBlock = new EntityBlockElements();
		this.pAttribute = new AttributeElements();
		this.pRepository = new RepositoryElements();
		this.pRepositoryFields = new RepositoryFieldsElements();
		this.pEnumBlock = new EnumBlockElements();
		this.pDataType = new DataTypeElements();
		this.pMethodParameter = new MethodParameterElements();
		this.pTypeAndAttribute = new TypeAndAttributeElements();
		this.pExtendBlock = new ExtendBlockElements();
		this.pExtend = new ExtendElements();
		this.pDataTypeList = new DataTypeListElements();
		this.pDataTypeSet = new DataTypeSetElements();
		this.pAccessModifier = new AccessModifierElements();
		this.pPrivate = new PrivateElements();
		this.pProtected = new ProtectedElements();
		this.pImportCompoundName = new ImportCompoundNameElements();
		this.pCompoundName = new CompoundNameElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pINTEGER = new INTEGERElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.edu.sr.ifes.leds.LedsCodeV001".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	//============== LEDSCode ============== 
	// * / LedsCodeDSL:
	//	project+=Project;
	public LedsCodeDSLElements getLedsCodeDSLAccess() {
		return pLedsCodeDSL;
	}
	
	public ParserRule getLedsCodeDSLRule() {
		return getLedsCodeDSLAccess().getRule();
	}

	//Project:
	//	"project" name=ID "{" infrastructureBlock=InfrastructureBlock interfaceBlock=InterfaceBlock?
	//	applicationBlock+=ApplicationBlock* domainBlock+=DomainBlock+ "}";
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}

	//InterfaceBlock:
	//	"interface" name=ID "{" interfaceApplication+=InterfaceApplication* "}";
	public InterfaceBlockElements getInterfaceBlockAccess() {
		return pInterfaceBlock;
	}
	
	public ParserRule getInterfaceBlockRule() {
		return getInterfaceBlockAccess().getRule();
	}

	//InterfaceApplication:
	//	type=("HtmlView" | "RestFull") name=ID "=>" nameApp=ID;
	public InterfaceApplicationElements getInterfaceApplicationAccess() {
		return pInterfaceApplication;
	}
	
	public ParserRule getInterfaceApplicationRule() {
		return getInterfaceApplicationAccess().getRule();
	}

	//InfrastructureBlock:
	//	"infrastructure" "{" "basePackage" "=" basePackage=STRING "projectVersion" "=" projectVersion=STRING "language" "="
	//	"{" language=NameVersion "}" "framework" "=" "{" framework=NameVersion "}" "orm" "=" "{" orm=NameVersion "}"
	//	"database" "=" "{" database=Database "}" "}";
	public InfrastructureBlockElements getInfrastructureBlockAccess() {
		return pInfrastructureBlock;
	}
	
	public ParserRule getInfrastructureBlockRule() {
		return getInfrastructureBlockAccess().getRule();
	}

	//Database:
	//	"@version" ":" versionValue=STRING "," "@name" ":" nameValue=STRING "," ("@user" ":" userValue=STRING ",")? ("@pass"
	//	":" passValue=STRING ",")? ("@host" ":" hostValue=STRING ",")? ("@env" ":" envValue=STRING ",")?;
	public DatabaseElements getDatabaseAccess() {
		return pDatabase;
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}

	//NameVersion:
	//	"@name" ":" nameValue=STRING "," "@version" ":" versionValue=STRING;
	public NameVersionElements getNameVersionAccess() {
		return pNameVersion;
	}
	
	public ParserRule getNameVersionRule() {
		return getNameVersionAccess().getRule();
	}

	//ApplicationBlock:
	//	"application" name=ID "{" ("composedBy" applicationDomain+=ImportCompoundName)* "}";
	public ApplicationBlockElements getApplicationBlockAccess() {
		return pApplicationBlock;
	}
	
	public ParserRule getApplicationBlockRule() {
		return getApplicationBlockAccess().getRule();
	}

	//DomainBlock:
	//	"domain" name=ID "{" module+=ModuleBlock* "}";
	public DomainBlockElements getDomainBlockAccess() {
		return pDomainBlock;
	}
	
	public ParserRule getDomainBlockRule() {
		return getDomainBlockAccess().getRule();
	}

	//ModuleBlock:
	//	"module" name=ID "{" (enumBlock+=EnumBlock | entityBlock+=EntityBlock | serviceBlock+=ServiceBlock)* "}";
	public ModuleBlockElements getModuleBlockAccess() {
		return pModuleBlock;
	}
	
	public ParserRule getModuleBlockRule() {
		return getModuleBlockAccess().getRule();
	}

	//ServiceBlock:
	//	"service" name=ID "{" serviceFields+=ServiceMethod* "}";
	public ServiceBlockElements getServiceBlockAccess() {
		return pServiceBlock;
	}
	
	public ParserRule getServiceBlockRule() {
		return getServiceBlockAccess().getRule();
	}

	//ServiceMethod:
	//	name=ID "=>" methodAcess=[RepositoryFields|CompoundName];
	public ServiceMethodElements getServiceMethodAccess() {
		return pServiceMethod;
	}
	
	public ParserRule getServiceMethodRule() {
		return getServiceMethodAccess().getRule();
	}

	//EntityBlock:
	//	acessModifier=AccessModifier? isAbstract?="abstract"? "entity" name=ID classExtends=ExtendBlock? "{"
	//	attributes+=Attribute* repository=Repository? "}";
	public EntityBlockElements getEntityBlockAccess() {
		return pEntityBlock;
	}
	
	public ParserRule getEntityBlockRule() {
		return getEntityBlockAccess().getRule();
	}

	//Attribute:
	//	acessModifier=AccessModifier? type=DataType name=ID (pk?="@pk" // Nao permitir usar between junto de max ou min
	//	| "@unique"+ "(" unique=BOOLEAN ")" | "@null"+ "(" nullable=BOOLEAN ")" | "@min"+ "(" min=INTEGER ")" | "@max"+ "("
	//	max=INTEGER ")" | "@between"+ "(" min=INTEGER "," max=INTEGER ")")*;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Repository:
	//	"repository" name=ID "{" methods+=RepositoryFields* "}";
	public RepositoryElements getRepositoryAccess() {
		return pRepository;
	}
	
	public ParserRule getRepositoryRule() {
		return getRepositoryAccess().getRule();
	}

	//RepositoryFields:
	//	name=ID "(" methodsParameters=MethodParameter? ")" ":" returnType=DataType;
	public RepositoryFieldsElements getRepositoryFieldsAccess() {
		return pRepositoryFields;
	}
	
	public ParserRule getRepositoryFieldsRule() {
		return getRepositoryFieldsAccess().getRule();
	}

	//EnumBlock:
	//	"enum" name=ID "{" values+=ID ("," values+=ID)* "}";
	public EnumBlockElements getEnumBlockAccess() {
		return pEnumBlock;
	}
	
	public ParserRule getEnumBlockRule() {
		return getEnumBlockAccess().getRule();
	}

	//DataType:
	//	DataTypeList | DataTypeSet | CompoundName | "String" | "int" | "Integer" | "long" | "Long" | "boolean" | "Boolean" |
	//	"Datetime" | "double" | "Double" | "float" | "Float";
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//MethodParameter:
	//	typeAndAttr+=TypeAndAttribute ("," typeAndAttr+=TypeAndAttribute)*;
	public MethodParameterElements getMethodParameterAccess() {
		return pMethodParameter;
	}
	
	public ParserRule getMethodParameterRule() {
		return getMethodParameterAccess().getRule();
	}

	//TypeAndAttribute:
	//	type=DataType name=ID;
	public TypeAndAttributeElements getTypeAndAttributeAccess() {
		return pTypeAndAttribute;
	}
	
	public ParserRule getTypeAndAttributeRule() {
		return getTypeAndAttributeAccess().getRule();
	}

	//ExtendBlock:
	//	Extend values+=[EntityBlock|CompoundName] ("," values+=[EntityBlock|CompoundName])?;
	public ExtendBlockElements getExtendBlockAccess() {
		return pExtendBlock;
	}
	
	public ParserRule getExtendBlockRule() {
		return getExtendBlockAccess().getRule();
	}

	//Extend:
	//	":" | "extends" | "ext";
	public ExtendElements getExtendAccess() {
		return pExtend;
	}
	
	public ParserRule getExtendRule() {
		return getExtendAccess().getRule();
	}

	//DataTypeList:
	//	"List" "<" DataType ">";
	public DataTypeListElements getDataTypeListAccess() {
		return pDataTypeList;
	}
	
	public ParserRule getDataTypeListRule() {
		return getDataTypeListAccess().getRule();
	}

	//DataTypeSet:
	//	"Set" "<" DataType ">";
	public DataTypeSetElements getDataTypeSetAccess() {
		return pDataTypeSet;
	}
	
	public ParserRule getDataTypeSetRule() {
		return getDataTypeSetAccess().getRule();
	}

	//AccessModifier:
	//	Private | Protected;
	public AccessModifierElements getAccessModifierAccess() {
		return pAccessModifier;
	}
	
	public ParserRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}

	//Private:
	//	"private";
	public PrivateElements getPrivateAccess() {
		return pPrivate;
	}
	
	public ParserRule getPrivateRule() {
		return getPrivateAccess().getRule();
	}

	//Protected:
	//	"protected";
	public ProtectedElements getProtectedAccess() {
		return pProtected;
	}
	
	public ParserRule getProtectedRule() {
		return getProtectedAccess().getRule();
	}

	//ImportCompoundName:
	//	CompoundName ".*"?;
	public ImportCompoundNameElements getImportCompoundNameAccess() {
		return pImportCompoundName;
	}
	
	public ParserRule getImportCompoundNameRule() {
		return getImportCompoundNameAccess().getRule();
	}

	//CompoundName:
	//	ID ("." ID)*;
	public CompoundNameElements getCompoundNameAccess() {
		return pCompoundName;
	}
	
	public ParserRule getCompoundNameRule() {
		return getCompoundNameAccess().getRule();
	}

	//BOOLEAN:
	//	"true" | "false";
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}

	//INTEGER returns ecore::EIntegerObject:
	//	INT+;
	public INTEGERElements getINTEGERAccess() {
		return pINTEGER;
	}
	
	public ParserRule getINTEGERRule() {
		return getINTEGERAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
