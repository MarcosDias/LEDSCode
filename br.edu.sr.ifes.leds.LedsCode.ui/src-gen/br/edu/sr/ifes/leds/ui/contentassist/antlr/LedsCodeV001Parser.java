/*
 * generated by Xtext
 */
package br.edu.sr.ifes.leds.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import br.edu.sr.ifes.leds.services.LedsCodeV001GrammarAccess;

public class LedsCodeV001Parser extends AbstractContentAssistParser {
	
	@Inject
	private LedsCodeV001GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected br.edu.sr.ifes.leds.ui.contentassist.antlr.internal.InternalLedsCodeV001Parser createParser() {
		br.edu.sr.ifes.leds.ui.contentassist.antlr.internal.InternalLedsCodeV001Parser result = new br.edu.sr.ifes.leds.ui.contentassist.antlr.internal.InternalLedsCodeV001Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInterfaceBlockAccess().getAlternatives_3_0(), "rule__InterfaceBlock__Alternatives_3_0");
					put(grammarAccess.getModuleBlockAccess().getAlternatives_3(), "rule__ModuleBlock__Alternatives_3");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getExtendAccess().getAlternatives(), "rule__Extend__Alternatives");
					put(grammarAccess.getImplementAccess().getAlternatives(), "rule__Implement__Alternatives");
					put(grammarAccess.getAccessModifierAccess().getAlternatives(), "rule__AccessModifier__Alternatives");
					put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
					put(grammarAccess.getInterfaceBlockAccess().getGroup(), "rule__InterfaceBlock__Group__0");
					put(grammarAccess.getInterfaceBlockAccess().getGroup_3(), "rule__InterfaceBlock__Group_3__0");
					put(grammarAccess.getInfrastructureBlockAccess().getGroup(), "rule__InfrastructureBlock__Group__0");
					put(grammarAccess.getDictBlockAccess().getGroup(), "rule__DictBlock__Group__0");
					put(grammarAccess.getDictBlockAccess().getGroup_1(), "rule__DictBlock__Group_1__0");
					put(grammarAccess.getDictBlockAccess().getGroup_1_1(), "rule__DictBlock__Group_1_1__0");
					put(grammarAccess.getApplicationBlockAccess().getGroup(), "rule__ApplicationBlock__Group__0");
					put(grammarAccess.getApplicationBlockAccess().getGroup_3(), "rule__ApplicationBlock__Group_3__0");
					put(grammarAccess.getDomainBlockAccess().getGroup(), "rule__DomainBlock__Group__0");
					put(grammarAccess.getModuleBlockAccess().getGroup(), "rule__ModuleBlock__Group__0");
					put(grammarAccess.getServiceBlockAccess().getGroup(), "rule__ServiceBlock__Group__0");
					put(grammarAccess.getServiceBlockAccess().getGroup_3(), "rule__ServiceBlock__Group_3__0");
					put(grammarAccess.getEntityBlockAccess().getGroup(), "rule__EntityBlock__Group__0");
					put(grammarAccess.getEntityBlockAccess().getGroup_7(), "rule__EntityBlock__Group_7__0");
					put(grammarAccess.getRepositoryBlockAccess().getGroup(), "rule__RepositoryBlock__Group__0");
					put(grammarAccess.getRepositoryBlockAccess().getGroup_3(), "rule__RepositoryBlock__Group_3__0");
					put(grammarAccess.getEnumBlockAccess().getGroup(), "rule__EnumBlock__Group__0");
					put(grammarAccess.getEnumBlockAccess().getGroup_4(), "rule__EnumBlock__Group_4__0");
					put(grammarAccess.getKeyValueAccess().getGroup(), "rule__KeyValue__Group__0");
					put(grammarAccess.getExtendBlockAccess().getGroup(), "rule__ExtendBlock__Group__0");
					put(grammarAccess.getImplementBlockAccess().getGroup(), "rule__ImplementBlock__Group__0");
					put(grammarAccess.getImplementBlockAccess().getGroup_2(), "rule__ImplementBlock__Group_2__0");
					put(grammarAccess.getDataTypeListAccess().getGroup(), "rule__DataTypeList__Group__0");
					put(grammarAccess.getDataTypeSetAccess().getGroup(), "rule__DataTypeSet__Group__0");
					put(grammarAccess.getImportCompoundNameAccess().getGroup(), "rule__ImportCompoundName__Group__0");
					put(grammarAccess.getCompoundNameAccess().getGroup(), "rule__CompoundName__Group__0");
					put(grammarAccess.getCompoundNameAccess().getGroup_1(), "rule__CompoundName__Group_1__0");
					put(grammarAccess.getCompoundVersionAccess().getGroup(), "rule__CompoundVersion__Group__0");
					put(grammarAccess.getCompoundVersionAccess().getGroup_1(), "rule__CompoundVersion__Group_1__0");
					put(grammarAccess.getLedsCodeDSLAccess().getProjectAssignment(), "rule__LedsCodeDSL__ProjectAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			br.edu.sr.ifes.leds.ui.contentassist.antlr.internal.InternalLedsCodeV001Parser typedParser = (br.edu.sr.ifes.leds.ui.contentassist.antlr.internal.InternalLedsCodeV001Parser) parser;
			typedParser.entryRuleLedsCodeDSL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LedsCodeV001GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LedsCodeV001GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
