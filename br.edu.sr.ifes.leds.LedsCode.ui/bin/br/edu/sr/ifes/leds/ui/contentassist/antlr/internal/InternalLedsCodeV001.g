/*
 * generated by Xtext
 */
grammar InternalLedsCodeV001;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package br.edu.sr.ifes.leds.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package br.edu.sr.ifes.leds.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import br.edu.sr.ifes.leds.services.LedsCodeV001GrammarAccess;

}

@parser::members {
 
 	private LedsCodeV001GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LedsCodeV001GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLedsCodeDSL
entryRuleLedsCodeDSL 
:
{ before(grammarAccess.getLedsCodeDSLRule()); }
	 ruleLedsCodeDSL
{ after(grammarAccess.getLedsCodeDSLRule()); } 
	 EOF 
;

// Rule LedsCodeDSL
ruleLedsCodeDSL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLedsCodeDSLAccess().getAlternatives()); }
(rule__LedsCodeDSL__Alternatives)
{ after(grammarAccess.getLedsCodeDSLAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleApplication
entryRuleApplication 
:
{ before(grammarAccess.getApplicationRule()); }
	 ruleApplication
{ after(grammarAccess.getApplicationRule()); } 
	 EOF 
;

// Rule Application
ruleApplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getApplicationAccess().getGroup()); }
(rule__Application__Group__0)
{ after(grammarAccess.getApplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModuleAplication
entryRuleModuleAplication 
:
{ before(grammarAccess.getModuleAplicationRule()); }
	 ruleModuleAplication
{ after(grammarAccess.getModuleAplicationRule()); } 
	 EOF 
;

// Rule ModuleAplication
ruleModuleAplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAplicationAccess().getGroup()); }
(rule__ModuleAplication__Group__0)
{ after(grammarAccess.getModuleAplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNameApplication
entryRuleNameApplication 
:
{ before(grammarAccess.getNameApplicationRule()); }
	 ruleNameApplication
{ after(grammarAccess.getNameApplicationRule()); } 
	 EOF 
;

// Rule NameApplication
ruleNameApplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameApplicationAccess().getGroup()); }
(rule__NameApplication__Group__0)
{ after(grammarAccess.getNameApplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLanguage
entryRuleLanguage 
:
{ before(grammarAccess.getLanguageRule()); }
	 ruleLanguage
{ after(grammarAccess.getLanguageRule()); } 
	 EOF 
;

// Rule Language
ruleLanguage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLanguageAccess().getGroup()); }
(rule__Language__Group__0)
{ after(grammarAccess.getLanguageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFramework
entryRuleFramework 
:
{ before(grammarAccess.getFrameworkRule()); }
	 ruleFramework
{ after(grammarAccess.getFrameworkRule()); } 
	 EOF 
;

// Rule Framework
ruleFramework
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFrameworkAccess().getGroup()); }
(rule__Framework__Group__0)
{ after(grammarAccess.getFrameworkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleORM
entryRuleORM 
:
{ before(grammarAccess.getORMRule()); }
	 ruleORM
{ after(grammarAccess.getORMRule()); } 
	 EOF 
;

// Rule ORM
ruleORM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getORMAccess().getGroup()); }
(rule__ORM__Group__0)
{ after(grammarAccess.getORMAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataBase
entryRuleDataBase 
:
{ before(grammarAccess.getDataBaseRule()); }
	 ruleDataBase
{ after(grammarAccess.getDataBaseRule()); } 
	 EOF 
;

// Rule DataBase
ruleDataBase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataBaseAccess().getGroup()); }
(rule__DataBase__Group__0)
{ after(grammarAccess.getDataBaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDictionary
entryRuleDictionary 
:
{ before(grammarAccess.getDictionaryRule()); }
	 ruleDictionary
{ after(grammarAccess.getDictionaryRule()); } 
	 EOF 
;

// Rule Dictionary
ruleDictionary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDictionaryAccess().getGroup()); }
(rule__Dictionary__Group__0)
{ after(grammarAccess.getDictionaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyValue
entryRuleKeyValue 
:
{ before(grammarAccess.getKeyValueRule()); }
	 ruleKeyValue
{ after(grammarAccess.getKeyValueRule()); } 
	 EOF 
;

// Rule KeyValue
ruleKeyValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyValueAccess().getGroup()); }
(rule__KeyValue__Group__0)
{ after(grammarAccess.getKeyValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__LedsCodeDSL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLedsCodeDSLAccess().getApplicationAssignment_0()); }
(rule__LedsCodeDSL__ApplicationAssignment_0)
{ after(grammarAccess.getLedsCodeDSLAccess().getApplicationAssignment_0()); }
)

    |(
(
{ before(grammarAccess.getLedsCodeDSLAccess().getModuleAplicationParserRuleCall_1()); }
(	ruleModuleAplication)
{ after(grammarAccess.getLedsCodeDSLAccess().getModuleAplicationParserRuleCall_1()); }
)
(
{ before(grammarAccess.getLedsCodeDSLAccess().getModuleAplicationParserRuleCall_1()); }
(	ruleModuleAplication)*
{ after(grammarAccess.getLedsCodeDSLAccess().getModuleAplicationParserRuleCall_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Application__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__0__Impl
	rule__Application__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getAppKeyword_0()); }

	'app' 

{ after(grammarAccess.getApplicationAccess().getAppKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__1__Impl
	rule__Application__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getApplicationAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__2__Impl
	rule__Application__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getNameApplicationAssignment_2()); }
(rule__Application__NameApplicationAssignment_2)
{ after(grammarAccess.getApplicationAccess().getNameApplicationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__3__Impl
	rule__Application__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getLanguageAssignment_3()); }
(rule__Application__LanguageAssignment_3)
{ after(grammarAccess.getApplicationAccess().getLanguageAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__4__Impl
	rule__Application__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getFrameworkAssignment_4()); }
(rule__Application__FrameworkAssignment_4)
{ after(grammarAccess.getApplicationAccess().getFrameworkAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__5__Impl
	rule__Application__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getOrmAssignment_5()); }
(rule__Application__OrmAssignment_5)
{ after(grammarAccess.getApplicationAccess().getOrmAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__6__Impl
	rule__Application__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getDatabaseAssignment_6()); }
(rule__Application__DatabaseAssignment_6)
{ after(grammarAccess.getApplicationAccess().getDatabaseAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__7__Impl
	rule__Application__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getModuleAplicationParserRuleCall_7()); }
	ruleModuleAplication
{ after(grammarAccess.getApplicationAccess().getModuleAplicationParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Application__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Application__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Application__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getApplicationAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__ModuleAplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuleAplication__Group__0__Impl
	rule__ModuleAplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleAplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAplicationAccess().getModuleKeyword_0()); }

	'module' 

{ after(grammarAccess.getModuleAplicationAccess().getModuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleAplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuleAplication__Group__1__Impl
	rule__ModuleAplication__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleAplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAplicationAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getModuleAplicationAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModuleAplication__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModuleAplication__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModuleAplication__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAplicationAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getModuleAplicationAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NameApplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameApplication__Group__0__Impl
	rule__NameApplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameApplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameApplicationAccess().getNameKeyword_0()); }

	'name' 

{ after(grammarAccess.getNameApplicationAccess().getNameKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameApplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameApplication__Group__1__Impl
	rule__NameApplication__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NameApplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameApplicationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getNameApplicationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameApplication__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameApplication__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameApplication__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameApplicationAccess().getNameAssignment_2()); }
(rule__NameApplication__NameAssignment_2)
{ after(grammarAccess.getNameApplicationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Language__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Language__Group__0__Impl
	rule__Language__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Language__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageAccess().getLanguageKeyword_0()); }

	'language' 

{ after(grammarAccess.getLanguageAccess().getLanguageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Language__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Language__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Language__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLanguageAccess().getDictionaryParserRuleCall_1()); }
	ruleDictionary
{ after(grammarAccess.getLanguageAccess().getDictionaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Framework__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Framework__Group__0__Impl
	rule__Framework__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Framework__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFrameworkAccess().getFrameworkKeyword_0()); }

	'framework' 

{ after(grammarAccess.getFrameworkAccess().getFrameworkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Framework__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Framework__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Framework__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFrameworkAccess().getDictionaryParserRuleCall_1()); }
	ruleDictionary
{ after(grammarAccess.getFrameworkAccess().getDictionaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ORM__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ORM__Group__0__Impl
	rule__ORM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ORM__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORMAccess().getOrmKeyword_0()); }

	'orm' 

{ after(grammarAccess.getORMAccess().getOrmKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ORM__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ORM__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ORM__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORMAccess().getDictionaryParserRuleCall_1()); }
	ruleDictionary
{ after(grammarAccess.getORMAccess().getDictionaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataBase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataBase__Group__0__Impl
	rule__DataBase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataBase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataBaseAccess().getDatabaseKeyword_0()); }

	'database' 

{ after(grammarAccess.getDataBaseAccess().getDatabaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataBase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataBase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataBase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataBaseAccess().getDictionaryParserRuleCall_1()); }
	ruleDictionary
{ after(grammarAccess.getDataBaseAccess().getDictionaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Dictionary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__0__Impl
	rule__Dictionary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getDictionaryAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__1__Impl
	rule__Dictionary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getElementsAssignment_1()); }
(rule__Dictionary__ElementsAssignment_1)
{ after(grammarAccess.getDictionaryAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__2__Impl
	rule__Dictionary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getGroup_2()); }
(rule__Dictionary__Group_2__0)*
{ after(grammarAccess.getDictionaryAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getDictionaryAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Dictionary__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2__0__Impl
	rule__Dictionary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getDictionaryAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dictionary__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dictionary__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getElementsAssignment_2_1()); }
(rule__Dictionary__ElementsAssignment_2_1)
{ after(grammarAccess.getDictionaryAccess().getElementsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__KeyValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValue__Group__0__Impl
	rule__KeyValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getKeyAssignment_0()); }
(rule__KeyValue__KeyAssignment_0)
{ after(grammarAccess.getKeyValueAccess().getKeyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValue__Group__1__Impl
	rule__KeyValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getKeyValueAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getValueAssignment_2()); }
(rule__KeyValue__ValueAssignment_2)
{ after(grammarAccess.getKeyValueAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__LedsCodeDSL__ApplicationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLedsCodeDSLAccess().getApplicationApplicationParserRuleCall_0_0()); }
	ruleApplication{ after(grammarAccess.getLedsCodeDSLAccess().getApplicationApplicationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Application__NameApplicationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getNameApplicationNameApplicationParserRuleCall_2_0()); }
	ruleNameApplication{ after(grammarAccess.getApplicationAccess().getNameApplicationNameApplicationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Application__LanguageAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getLanguageLanguageParserRuleCall_3_0()); }
	ruleLanguage{ after(grammarAccess.getApplicationAccess().getLanguageLanguageParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Application__FrameworkAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getFrameworkFrameworkParserRuleCall_4_0()); }
	ruleFramework{ after(grammarAccess.getApplicationAccess().getFrameworkFrameworkParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Application__OrmAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getOrmORMParserRuleCall_5_0()); }
	ruleORM{ after(grammarAccess.getApplicationAccess().getOrmORMParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Application__DatabaseAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getApplicationAccess().getDatabaseDataBaseParserRuleCall_6_0()); }
	ruleDataBase{ after(grammarAccess.getApplicationAccess().getDatabaseDataBaseParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameApplication__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameApplicationAccess().getNameUNQUOTED_STRINGTerminalRuleCall_2_0()); }
	RULE_UNQUOTED_STRING{ after(grammarAccess.getNameApplicationAccess().getNameUNQUOTED_STRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getElementsKeyValueParserRuleCall_1_0()); }
	ruleKeyValue{ after(grammarAccess.getDictionaryAccess().getElementsKeyValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dictionary__ElementsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDictionaryAccess().getElementsKeyValueParserRuleCall_2_1_0()); }
	ruleKeyValue{ after(grammarAccess.getDictionaryAccess().getElementsKeyValueParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__KeyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getKeyIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getKeyValueAccess().getKeyIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getKeyValueAccess().getValueSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INT : ('0'..'9')+;

RULE_UNQUOTED_STRING : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_OL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ANY_OTHER : .;


